{
	"name": "pln_service_bus_ingest",
	"properties": {
		"activities": [
			{
				"name": "Set entity_name",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "entity_name",
					"value": {
						"value": "@replace(replace(pipeline().parameters.entity_name_input, '[''', ''), ''']', '')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set pipeline name",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set entity_name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "pipeline name",
					"value": {
						"value": "@concat(concat(pipeline().Pipeline, ' - '), variables('entity_name'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Create standardised table",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Record checking data on service bus",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "create_table_from_schema",
						"type": "NotebookReference"
					},
					"parameters": {
						"db_name": {
							"value": "odw_standardised_db",
							"type": "string"
						},
						"entity_name": {
							"value": {
								"value": "@variables('entity_name')",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Create harmonised table",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Record checking data on service bus",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "create_table_from_schema",
						"type": "NotebookReference"
					},
					"parameters": {
						"db_name": {
							"value": "odw_harmonised_db",
							"type": "string"
						},
						"entity_name": {
							"value": {
								"value": "@variables('entity_name')",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Create curated table",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Record checking data on service bus",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "create_table_from_schema",
						"type": "NotebookReference"
					},
					"parameters": {
						"db_name": {
							"value": "odw_curated_db",
							"type": "string"
						},
						"entity_name": {
							"value": {
								"value": "@variables('entity_name')",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "If service user",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Create standardised table",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Create harmonised table",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Create curated table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('entity_name'), 'service-user')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Src to Raw - non service user",
							"description": "Triggers Function App to read messages from Service Bus and write to odw-raw",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_trigger_function_app",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"function_name": {
										"value": "@variables('entity_name')",
										"type": "Expression"
									},
									"Key_Vault_Url": {
										"value": "@pipeline().parameters.Key_Vault_Url",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Set number of messages received - non service user",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Src to Raw - non service user",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Number_of_messages",
								"value": {
									"value": "@int(coalesce(activity('Src to Raw - non service user').output.pipelineReturnValue.Messages, '0'))",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Src to Raw - service user",
							"description": "Triggers Function App to read messages from Service Bus and write to odw-raw",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_trigger_function_app",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"function_name": {
										"value": "service-user",
										"type": "Expression"
									},
									"Key_Vault_Url": {
										"value": "@pipeline().parameters.Key_Vault_Url",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Src to Raw - appeal service user",
							"description": "Triggers Function App to read messages from Service Bus and write to odw-raw",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_trigger_function_app",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"function_name": {
										"value": "appeal-service-user",
										"type": "Expression"
									},
									"Key_Vault_Url": {
										"value": "@pipeline().parameters.Key_Vault_Url",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Set number of messages received - service user",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Src to Raw - service user",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Src to Raw - appeal service user",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Number_of_messages",
								"value": {
									"value": "@add(\n    int(coalesce(activity('Src to Raw - service user').output.pipelineReturnValue.Messages, '0')),\n    int(coalesce(activity('Src to Raw - appeal service user').output.pipelineReturnValue.Messages, '0'))\n    )",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Record starting service bus stage",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Set pipeline name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "OnProgress",
						"PipelineName": {
							"value": "@variables('pipeline name')",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@concat('Progressing to load service bus: ', variables('entity_name'))",
							"type": "Expression"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Record checking data on service bus",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Record starting service bus stage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "OnProgress",
						"PipelineName": {
							"value": "@variables('pipeline name')",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@concat(variables('entity_name'), ': Checking service bus subscription for messages')",
							"type": "Expression"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Record service bus completion",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If service user",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Completion",
						"PipelineName": {
							"value": "@variables('pipeline name')",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@concat('Progressing to load service bus: ', variables('entity_name'))",
							"type": "Expression"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"entity_name_input": {
				"type": "string",
				"defaultValue": "['default']"
			},
			"apps_insights_ikey": {
				"type": "string"
			},
			"Key_Vault_Url": {
				"type": "string"
			}
		},
		"variables": {
			"entity_name": {
				"type": "String",
				"defaultValue": "test"
			},
			"Number_of_messages": {
				"type": "Integer",
				"defaultValue": 0
			},
			"pipeline name": {
				"type": "String",
				"defaultValue": "test"
			},
			"record_count": {
				"type": "String",
				"defaultValue": "0"
			},
			"Error_message": {
				"type": "String"
			},
			"Key_Vault_Url": {
				"type": "String"
			}
		},
		"folder": {
			"name": "utils/Master"
		},
		"annotations": []
	}
}