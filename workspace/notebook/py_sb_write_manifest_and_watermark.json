{
	"name": "py_sb_write_manifest_and_watermark",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e09be062-a5d4-46f2-b88d-f6feb22df80a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql import Row\n",
					"import json, datetime, uuid\n",
					"\n",
					"# 1) Parameters from pipeline\n",
					"p = mssparkutils.notebook.getContext().notebookParameters\n",
					"\n",
					"entity_name      = p.get(\"entity_name\", \"\").strip()\n",
					"run_context_raw  = p.get(\"runContextJson\", \"{}\")\n",
					"records_ingested = int(p.get(\"recordsIngested\", \"0\"))\n",
					"status           = p.get(\"status\", \"Succeeded\")\n",
					"\n",
					"assert entity_name, \"Missing required param: entity_name\"\n",
					"\n",
					"ctx = json.loads(run_context_raw or \"{}\")\n",
					"run_id        = ctx.get(\"runId\", str(uuid.uuid4()))\n",
					"raw_base_root = (ctx.get(\"rawBasePath\") or \"\").rstrip(\"/\")\n",
					"\n",
					"# We keep one folder per entity under raw/\n",
					"entity_base_path = f\"{raw_base_root}/{entity_name}\"\n",
					"\n",
					"# YYYY-MM-DD (UTC)\n",
					"ingest_date = datetime.datetime.utcnow().strftime(\"%Y-%m-%d\")\n",
					"\n",
					"# 2) Compose manifest path & metadata\n",
					"source         = \"service-bus\"\n",
					"run_dir        = f\"{entity_base_path}/ingest_date={ingest_date}/run_id={run_id}\"\n",
					"manifest_path  = f\"{run_dir}/manifest.json\"\n",
					"\n",
					"manifest = {\n",
					"    \"entity\": entity_name,\n",
					"    \"source\": source,\n",
					"    \"runId\": run_id,\n",
					"    \"engEnvironment\": ctx.get(\"environment\", \"\"),\n",
					"    \"ingestDate\": ingest_date,\n",
					"    \"writtenAt\": datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%SZ\"),\n",
					"    \"recordsIngested\": records_ingested,\n",
					"    \"filesWritten\": 0,\n",
					"    \"status\": status\n",
					"}\n",
					"\n",
					"# Ensure directory exists and write manifest\n",
					"mssparkutils.fs.mkdirs(run_dir)\n",
					"# Count parquet files created by upstream ingestion (if any)\n",
					"try:\n",
					"    files = mssparkutils.fs.ls(run_dir)\n",
					"    files_written = sum(1 for f in files if f.name.endswith(\".parquet\"))\n",
					"except Exception:\n",
					"    files_written = 0\n",
					"\n",
					"manifest[\"filesWritten\"] = files_written\n",
					"mssparkutils.fs.put(manifest_path, json.dumps(manifest), True)\n",
					"\n",
					"print(f\"manifest written: {manifest_path} (records={records_ingested}, files={files_written})\")\n",
					"\n",
					"# 3) Upsert watermark (Delta)\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS odw_meta_db\")\n",
					"spark.sql(\"USE odw_meta_db\")\n",
					"\n",
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS watermarks (\n",
					"  entity            STRING,\n",
					"  source            STRING,\n",
					"  last_ingest_time  TIMESTAMP,\n",
					"  ingest_date       STRING,\n",
					"  run_id            STRING,\n",
					"  manifest_path     STRING,\n",
					"  records_ingested  BIGINT,\n",
					"  status            STRING,\n",
					"  updated_at        TIMESTAMP\n",
					") USING DELTA\n",
					"\"\"\")\n",
					"\n",
					"now_ts = datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%S\")\n",
					"\n",
					"wm_df = spark.createDataFrame([\n",
					"  Row(\n",
					"    entity=entity_name,\n",
					"    source=source,\n",
					"    last_ingest_time=now_ts,\n",
					"    ingest_date=ingest_date,\n",
					"    run_id=run_id,\n",
					"    manifest_path=manifest_path,\n",
					"    records_ingested=records_ingested,\n",
					"    status=status,\n",
					"    updated_at=now_ts\n",
					"  )\n",
					"])\n",
					"wm_df.createOrReplaceTempView(\"wm_upd\")\n",
					"\n",
					"spark.sql(\"\"\"\n",
					"MERGE INTO odw_meta_db.watermarks AS tgt\n",
					"USING wm_upd AS src\n",
					"ON  tgt.entity = src.entity\n",
					"AND tgt.source = src.source\n",
					"AND tgt.ingest_date = src.ingest_date\n",
					"WHEN MATCHED THEN UPDATE SET\n",
					"  tgt.last_ingest_time = src.last_ingest_time,\n",
					"  tgt.run_id           = src.run_id,\n",
					"  tgt.manifest_path    = src.manifest_path,\n",
					"  tgt.records_ingested = src.records_ingested,\n",
					"  tgt.status           = src.status,\n",
					"  tgt.updated_at       = src.updated_at\n",
					"WHEN NOT MATCHED THEN INSERT *\n",
					"\"\"\")\n",
					"\n",
					"print(f\"watermark upserted for {entity_name} / {ingest_date}\")\n",
					"\n",
					"# 4) Return values back to pipeline\n",
					"mssparkutils.notebook.exit(json.dumps({\n",
					"  \"manifestPath\": manifest_path,\n",
					"  \"records\": records_ingested,\n",
					"  \"filesWritten\": files_written,\n",
					"  \"status\": status\n",
					"}))\n",
					""
				],
				"execution_count": null
			}
		]
	}
}