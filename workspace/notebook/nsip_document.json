{
	"name": "nsip_document",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "46f6dd9d-7f80-44e4-9ffa-d377282f4fb2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest service bus data into a single external table, odw_curated_db.nsip_document.\n",
					"\n",
					"**Description**  \n",
					"The functionality of this notebook is to ingest data into odw_curated_db.nsip_document external Table reading from odw_harmonised_db.nsip_document delta table.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"nsip-document\"\n",
					"table_name: str = \"odw_curated_db.nsip_document\"\n",
					"\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\n",
					"    df = spark.sql(\"\"\"\n",
					"        SELECT DISTINCT \n",
					"        doc.documentId,\n",
					"        doc.caseId,\n",
					"        doc.caseRef,\n",
					"        doc.documentReference,\n",
					"        doc.version,\n",
					"        doc.examinationRefNo,\n",
					"        doc.filename,\n",
					"        doc.originalFilename,\n",
					"        doc.size,\n",
					"        doc.mime,\n",
					"        COALESCE(doc.documentURI, '') AS documentURI,\n",
					"        doc.publishedDocumentURI,\n",
					"        doc.path,\n",
					"        doc.virusCheckStatus,\n",
					"        doc.fileMD5,\n",
					"        doc.dateCreated,\n",
					"        doc.lastModified,\n",
					"        LOWER(doc.caseType) AS caseType,\n",
					"        doc.redactedStatus,\n",
					"        CASE\n",
					"            WHEN doc.PublishedStatus = 'Depublished'\n",
					"            THEN 'unpublished'\n",
					"            ELSE REPLACE(\n",
					"                LOWER(doc.PublishedStatus),\n",
					"                ' ',\n",
					"                '_')\n",
					"        END AS publishedStatus,\n",
					"        doc.datePublished,\n",
					"        doc.documentType,\n",
					"        doc.securityClassification,\n",
					"        doc.sourceSystem,\n",
					"        doc.origin,\n",
					"        doc.owner,\n",
					"        doc.author,\n",
					"        doc.authorWelsh,\n",
					"        doc.representative,\n",
					"        doc.description,\n",
					"        doc.descriptionWelsh,\n",
					"        CASE\n",
					"            WHEN doc.documentCaseStage = \"Developer's Application\"\n",
					"            THEN 'developers_application'\n",
					"            WHEN doc.documentCaseStage = 'Post decision'\n",
					"            THEN 'post_decision'\n",
					"            ELSE LOWER(doc.documentCaseStage)\t            \n",
					"        END AS documentCaseStage,\n",
					"        doc.filter1,\n",
					"        doc.filter1Welsh,\n",
					"        doc.filter2,\n",
					"        doc.horizonFolderId,\n",
					"        doc.transcriptId\t\n",
					"        FROM odw_harmonised_db.nsip_document AS doc\n",
					"        LEFT JOIN odw_curated_db.nsip_project proj\n",
					"            ON proj.caseReference = doc.caseRef\n",
					"        WHERE doc.IsActive = 'Y'\n",
					"            \"\"\"\n",
					"        )\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in SQL query for table odw_harmonised_db.nsip_document and odw_curated_db.nsip_project : {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"    insert_count = df.count()\n",
					"    print(insert_count)\n",
					"    df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\n",
					"    print(f\"Written to {table_name}\")\n",
					"    \n",
					"    end_exec_time = datetime.now()\n",
					"   \n",
					"except Exception as e:\n",
					"    error_message = f\"Error appending data to the curated layer {table_name} table : {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#####  Logging Execution Metadata to Azure Application Insights"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"stage = \"Success\" if not error_message else \"Failed\"\n",
					"status_message = (\n",
					"    f\"Successfully loaded data into {table_name} table\"\n",
					"    if not error_message\n",
					"    else f\"Failed to load data from {table_name} table\"\n",
					")\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					"\n",
					"log_telemetry_and_exit(\n",
					"    stage,\n",
					"    start_exec_time,\n",
					"    end_exec_time,\n",
					"    error_message,\n",
					"    table_name,\n",
					"    insert_count,\n",
					"    update_count,\n",
					"    delete_count,\n",
					"    PipelineName,\n",
					"    PipelineRunID,\n",
					"    PipelineTriggerID,\n",
					"    PipelineTriggerName,\n",
					"    PipelineTriggerType,\n",
					"    PipelineTriggeredbyPipelineName,\n",
					"    PipelineTriggeredbyPipelineRunID,\n",
					"    activity_type,\n",
					"    duration_seconds,\n",
					"    status_message,\n",
					"    status_code\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}