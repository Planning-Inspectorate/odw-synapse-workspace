{
	"name": "py_applicationinsights",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "577a5bcf-8294-43cc-bafe-3d48cefff842"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import sys\n",
					"import requests\n",
					"from datetime import datetime\n",
					"import traceback\n",
					"\n",
					"def send_telemetry_to_app_insights(params):\n",
					"    try:\n",
					"        key = mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\n",
					"        instrumentation_key = key.split(\"InstrumentationKey=\")[-1].split(\";\")[0]\n",
					"    except Exception as e:\n",
					"        print(\"Failed to get instrumentation key:\", e)\n",
					"        return\n",
					"\n",
					"    endpoint = \"https://uksouth-1.in.applicationinsights.azure.com/v2/track\"\n",
					"\n",
					"    body = {\n",
					"        \"Stage\": params.get(\"Stage\"),\n",
					"        \"PipelineName\": params.get(\"PipelineName\"),\n",
					"        \"PipelineRunID\": params.get(\"PipelineRunID\"),\n",
					"        \"StartTime\": params.get(\"StartTime\"),\n",
					"        \"EndTime\": params.get(\"EndTime\"),\n",
					"        \"Inserts\": str(params.get(\"Inserts\", 0)),\n",
					"        \"Updates\": str(params.get(\"Updates\", 0)),\n",
					"        \"Deletes\": str(params.get(\"Deletes\", 0)),\n",
					"        \"ErrorMessage\": params.get(\"ErrorMessage\"),\n",
					"        \"StatusMessage\": params.get(\"StatusMessage\"),\n",
					"        \"PipelineTriggerID\": params.get(\"PipelineTriggerID\"),\n",
					"        \"PipelineTriggerName\": params.get(\"PipelineTriggerName\"),\n",
					"        \"PipelineTriggerType\": params.get(\"PipelineTriggerType\"),\n",
					"        \"PipelineTriggeredbyPipelineName\": params.get(\"PipelineTriggeredbyPipelineName\"),\n",
					"        \"PipelineTriggeredbyPipelineRunID\": params.get(\"PipelineTriggeredbyPipelineRunID\"),\n",
					"        \"PipelineExecutionTimeInSec\": params.get(\"PipelineExecutionTimeInSec\"),\n",
					"        \"ActivityType\": params.get(\"ActivityType\"),\n",
					"        \"StatusCode\": params.get(\"StatusCode\"),\n",
					"        \"DurationSeconds\": params.get(\"DurationSeconds\")\n",
					"    }\n",
					"\n",
					"    payload = {\n",
					"        \"name\": \"Microsoft.ApplicationInsights.Event\",\n",
					"        \"time\": datetime.utcnow().isoformat() + \"Z\",\n",
					"        \"iKey\": instrumentation_key,\n",
					"        \"data\": {\n",
					"            \"baseType\": \"EventData\",\n",
					"            \"baseData\": {\n",
					"                \"name\": params.get(\"AppInsCustomEventName\", \"ODW_Master_Pipeline_Logs\"),\n",
					"                \"properties\": body\n",
					"            }\n",
					"        }\n",
					"    }\n",
					"\n",
					"    try:\n",
					"        response = requests.post(endpoint, json=payload)\n",
					"        print(\"Telemetry sent:\", response.status_code)\n",
					"    except Exception as e:\n",
					"        print(\"Failed to send telemetry:\", e)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def log_telemetry_and_exit(\n",
					"    stage,\n",
					"    start_exec_time,\n",
					"    end_exec_time,\n",
					"    error_message,\n",
					"    table_name,\n",
					"    insert_count,\n",
					"    update_count,\n",
					"    delete_count,\n",
					"    PipelineName,\n",
					"    PipelineRunID,\n",
					"    PipelineTriggerID,\n",
					"    PipelineTriggerName,\n",
					"    PipelineTriggerType,\n",
					"    PipelineTriggeredbyPipelineName,\n",
					"    PipelineTriggeredbyPipelineRunID,\n",
					"    activity_type,\n",
					"    duration_seconds,\n",
					"    status_message,\n",
					"    status_code\n",
					"):\n",
					"    params = {\n",
					"        \"Stage\": stage,\n",
					"        \"PipelineName\": PipelineName,\n",
					"        \"PipelineRunID\": PipelineRunID,\n",
					"        \"StartTime\": start_exec_time.isoformat(),\n",
					"        \"EndTime\": end_exec_time.isoformat(),\n",
					"        \"Inserts\": insert_count,\n",
					"        \"Updates\": update_count,\n",
					"        \"Deletes\": delete_count,\n",
					"        \"ErrorMessage\": error_message,\n",
					"        \"StatusMessage\": status_message,\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\n",
					"        \"PipelineExecutionTimeInSec\": duration_seconds,\n",
					"        \"ActivityType\": activity_type,\n",
					"        \"DurationSeconds\": duration_seconds,\n",
					"        \"StatusCode\": status_code,\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\n",
					"    }\n",
					"\n",
					"    send_telemetry_to_app_insights(params)\n",
					"\n",
					"    if error_message:\n",
					"        print(f\"Notebook Failed for load : {error_message}\")\n",
					"        sys.exit(1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def format_error_message(error: Exception, max_length: int = 800) -> str:\n",
					"    \"\"\"\n",
					"    Format error message with traceback, truncated to specified length\n",
					"    \n",
					"    Args:\n",
					"        error: Exception object\n",
					"        max_length: Maximum length of error message\n",
					"        \n",
					"    Returns:\n",
					"        Formatted error message string\n",
					"    \"\"\"\n",
					"    # Get full traceback\n",
					"    full_trace = traceback.format_exc()\n",
					"    \n",
					"    # Combine error message and trace\n",
					"    table_error_msg = str(error)\n",
					"    complete_msg = table_error_msg + \"\\n\" + full_trace\n",
					"    error_text = complete_msg[:max_length]           \n",
					"    \n",
					"    # Find the position of the last full stop before max_length characters\n",
					"    last_period_index = error_text.rfind('.')\n",
					"\n",
					"    # Use up to the last full stop, if found; else fall back to max_length chars\n",
					"    if last_period_index != -1:\n",
					"        error_message = error_text[:last_period_index + 1] \n",
					"    else:\n",
					"        error_message = error_text\n",
					"    \n",
					"    return error_message"
				],
				"execution_count": null
			}
		]
	}
}