{
	"name": "py_work_schedule_rule",
	"properties": {
		"folder": {
			"name": "odw-harmonised/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "40526f17-c3a9-4f81-a432-7c7d4761f8e6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Standardised layer and build a table Work Schedule Rule for Absence Data.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;27-July-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Work Schedule Rule in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"%run utils/py_logging_decorator"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Check source table exists\n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    # Check target table exists\n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    # Get current record count before deletion\n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    # Validate source data\n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    # Execute the main processing query\n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"\"\"\n",
					"        DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    # Execute the complex INSERT operation\n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"            WorkScheduleRule,\n",
					"            WorkScheduleCode,\n",
					"            MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"            MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"            WkHrsWk1, WkHrsWk2,\n",
					"            AvgWkHrs,\n",
					"            WSRstart,\n",
					"            Currentweek,\n",
					"            Lastmodified,\n",
					"            IngestionDate\n",
					"        )\n",
					"        WITH normalized_data AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                \n",
					"                -- Normalize and clean description\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(\n",
					"                            regexp_replace(\n",
					"                                regexp_replace(lower(wsr_description), \n",
					"                                    'monday|mon\\\\.?', 'mon'),\n",
					"                                'tuesday|tue\\\\.?', 'tue'),\n",
					"                            'wednesday|wed\\\\.?', 'wed'),\n",
					"                        'thursday|thu\\\\.?|thus', 'thu'),\n",
					"                    'friday|fri\\\\.?', 'fri'\n",
					"                ) AS clean_desc,\n",
					"                \n",
					"                -- Extract week 1 and week 2 sections\n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week1_section,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week2_section\n",
					"                \n",
					"            FROM odw_standardised_db.workschedulerule_weekly\n",
					"        ),\n",
					"\n",
					"        parsed_hours AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                clean_desc,\n",
					"                week1_section,\n",
					"                week2_section,\n",
					"                \n",
					"                -- Parse Monday Week 1\n",
					"                CASE \n",
					"                    -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle individual \"monday\" mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk1,\n",
					"                \n",
					"                -- Parse Tuesday Week 1\n",
					"                CASE \n",
					"                    -- Handle ranges that include Tuesday with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR \n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle individual Tuesday mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk1,\n",
					"                \n",
					"                -- Parse Wednesday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk1,\n",
					"                \n",
					"                -- Parse Thursday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk1,\n",
					"                \n",
					"                -- Parse Friday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk1,\n",
					"                \n",
					"                -- Parse Week 2 hours (simplified version for brevity)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk2\n",
					"                \n",
					"            FROM normalized_data\n",
					"        )\n",
					"\n",
					"        SELECT \n",
					"            -- Direct field mappings\n",
					"            wsr_name AS WorkScheduleRule,\n",
					"            wsr_code AS WorkScheduleCode,\n",
					"            \n",
					"            -- Parsed daily hours\n",
					"            ROUND(mo_wk1, 2) AS MoWk1,\n",
					"            ROUND(tu_wk1, 2) AS TuWk1,\n",
					"            ROUND(we_wk1, 2) AS WeWk1,\n",
					"            ROUND(th_wk1, 2) AS ThWk1,\n",
					"            ROUND(fr_wk1, 2) AS FrWk1,\n",
					"            ROUND(mo_wk2, 2) AS MoWk2,\n",
					"            ROUND(tu_wk2, 2) AS TuWk2,\n",
					"            ROUND(we_wk2, 2) AS WeWk2,\n",
					"            ROUND(th_wk2, 2) AS ThWk2,\n",
					"            ROUND(fr_wk2, 2) AS FrWk2,\n",
					"            \n",
					"            -- Calculate weekly totals\n",
					"            ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"            ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"            \n",
					"            -- Calculate average weekly hours\n",
					"            ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"            \n",
					"            -- Date conversion - Handle DD/MM/YYYY format\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    RIGHT(wsr_startdate, 4), '-',\n",
					"                                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                )\n",
					"                            ELSE wsr_startdate\n",
					"                        END AS DATE\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS WSRstart,\n",
					"            \n",
					"            -- Calculate current week (now depends on properly parsed date)\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    CASE \n",
					"                        WHEN ((datediff(current_date(), \n",
					"                            TRY_CAST(\n",
					"                                CASE \n",
					"                                    WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                        CONCAT(\n",
					"                                            RIGHT(wsr_startdate, 4), '-',\n",
					"                                            LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                            LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                        )\n",
					"                                    ELSE wsr_startdate\n",
					"                                END AS DATE\n",
					"                            )\n",
					"                        ) / 7) % 2) = 0 THEN 1 \n",
					"                        ELSE 2 \n",
					"                    END\n",
					"                ELSE 1\n",
					"            END AS Currentweek,\n",
					"            \n",
					"            -- Last modified timestamp\n",
					"            CASE \n",
					"                WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_lastmodified RLIKE '^\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                                )\n",
					"                            ELSE wsr_lastmodified\n",
					"                        END AS TIMESTAMP\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS Lastmodified,\n",
					"            \n",
					"            -- Ingestion timestamp\n",
					"            CASE \n",
					"                WHEN ingested_datetime IS NOT NULL THEN\n",
					"                    TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"                ELSE current_timestamp()\n",
					"            END AS IngestionDate\n",
					"\n",
					"        FROM parsed_hours\n",
					"    \"\"\")\n",
					"    \n",
					"    # Get final record count\n",
					"    logInfo(\"Getting final record count after processing\")\n",
					"    final_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    # Data quality checks\n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    \n",
					"    # Check for records with valid work schedule rules\n",
					"    valid_rules_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with valid WorkScheduleRule: {valid_rules_count}\")\n",
					"    \n",
					"    # Check for records with parsed hours\n",
					"    parsed_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE (MoWk1 + TuWk1 + WeWk1 + ThWk1 + FrWk1 + MoWk2 + TuWk2 + WeWk2 + ThWk2 + FrWk2) > 0\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with parsed working hours: {parsed_hours_count}\")\n",
					"    \n",
					"    # Check for records with valid average weekly hours\n",
					"    avg_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE AvgWkHrs > 0 AND AvgWkHrs <= 80\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with reasonable average weekly hours (0-80): {avg_hours_count}\")\n",
					"    \n",
					"    # Add quality metrics to result\n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    \n",
					"    # Try to get current state for debugging\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"        \"\"\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"        logInfo(f\"Records remaining after error: {current_count_after_error}\")\n",
					"    except Exception as count_error:\n",
					"        logError(f\"Could not get record count after error: {str(count_error)}\")\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Check source table exists\n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    # Check target table exists\n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    # Get current record count before deletion\n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    # Validate source data\n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    # Execute the main processing query\n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"\"\"\n",
					"        DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    # Execute the complex INSERT operation\n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"            WorkScheduleRule,\n",
					"            WorkScheduleCode,\n",
					"            MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"            MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"            WkHrsWk1, WkHrsWk2,\n",
					"            AvgWkHrs,\n",
					"            WSRstart,\n",
					"            Currentweek,\n",
					"            Lastmodified,\n",
					"            IngestionDate\n",
					"        )\n",
					"        WITH normalized_data AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                \n",
					"                -- Normalize and clean description\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(\n",
					"                            regexp_replace(\n",
					"                                regexp_replace(lower(wsr_description), \n",
					"                                    'monday|mon\\\\.?', 'mon'),\n",
					"                                'tuesday|tue\\\\.?', 'tue'),\n",
					"                            'wednesday|wed\\\\.?', 'wed'),\n",
					"                        'thursday|thu\\\\.?|thus', 'thu'),\n",
					"                    'friday|fri\\\\.?', 'fri'\n",
					"                ) AS clean_desc,\n",
					"                \n",
					"                -- Extract week 1 and week 2 sections\n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week1_section,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week2_section\n",
					"                \n",
					"            FROM odw_standardised_db.workschedulerule_weekly\n",
					"        ),\n",
					"\n",
					"        parsed_hours AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                clean_desc,\n",
					"                week1_section,\n",
					"                week2_section,\n",
					"                \n",
					"                -- ==================== WEEK 1 PARSING ====================\n",
					"                \n",
					"                -- Parse Monday Week 1\n",
					"                CASE \n",
					"                    -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle individual \"monday\" mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk1,\n",
					"                \n",
					"                -- Parse Tuesday Week 1\n",
					"                CASE \n",
					"                    -- Handle ranges that include Tuesday with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR \n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle individual Tuesday mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk1,\n",
					"                \n",
					"                -- Parse Wednesday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk1,\n",
					"                \n",
					"                -- Parse Thursday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk1,\n",
					"                \n",
					"                -- Parse Friday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk1,\n",
					"                \n",
					"                =============== WEEK 2 PARSING =============\n",
					"                \n",
					"                -- Parse Monday Week 2 (with full range support)\n",
					"                CASE \n",
					"                    -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"                    WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle individual \"monday\" mentions with flexible minutes\n",
					"                    WHEN week2_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk2,\n",
					"                \n",
					"                -- Parse Tuesday Week 2 (with full range support)\n",
					"                CASE \n",
					"                    -- Handle ranges that include Tuesday with flexible minutes format\n",
					"                    WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR \n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle individual Tuesday mentions with flexible minutes\n",
					"                    WHEN week2_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week2_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk2,\n",
					"                \n",
					"                -- Parse Wednesday Week 2 (with full range support)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week2_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week2_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk2,\n",
					"                \n",
					"                -- Parse Thursday Week 2 (with full range support)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week2_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week2_section RLIKE 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week2_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk2,\n",
					"                \n",
					"                -- Parse Friday Week 2 (with full range support)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week2_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week2_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week2_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk2\n",
					"                \n",
					"            FROM normalized_data\n",
					"        )\n",
					"\n",
					"        SELECT \n",
					"            -- Direct field mappings\n",
					"            wsr_name AS WorkScheduleRule,\n",
					"            wsr_code AS WorkScheduleCode,\n",
					"            \n",
					"            -- Parsed daily hours\n",
					"            ROUND(mo_wk1, 2) AS MoWk1,\n",
					"            ROUND(tu_wk1, 2) AS TuWk1,\n",
					"            ROUND(we_wk1, 2) AS WeWk1,\n",
					"            ROUND(th_wk1, 2) AS ThWk1,\n",
					"            ROUND(fr_wk1, 2) AS FrWk1,\n",
					"            ROUND(mo_wk2, 2) AS MoWk2,\n",
					"            ROUND(tu_wk2, 2) AS TuWk2,\n",
					"            ROUND(we_wk2, 2) AS WeWk2,\n",
					"            ROUND(th_wk2, 2) AS ThWk2,\n",
					"            ROUND(fr_wk2, 2) AS FrWk2,\n",
					"            \n",
					"            -- Calculate weekly totals\n",
					"            ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"            ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"            \n",
					"            -- Calculate average weekly hours\n",
					"            ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"            \n",
					"            -- Date conversion - Handle DD/MM/YYYY format\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    RIGHT(wsr_startdate, 4), '-',\n",
					"                                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                )\n",
					"                            ELSE wsr_startdate\n",
					"                        END AS DATE\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS WSRstart,\n",
					"            \n",
					"            -- Calculate current week (now depends on properly parsed date)\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    CASE \n",
					"                        WHEN ((datediff(current_date(), \n",
					"                            TRY_CAST(\n",
					"                                CASE \n",
					"                                    WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                        CONCAT(\n",
					"                                            RIGHT(wsr_startdate, 4), '-',\n",
					"                                            LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                            LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                        )\n",
					"                                    ELSE wsr_startdate\n",
					"                                END AS DATE\n",
					"                            )\n",
					"                        ) / 7) % 2) = 0 THEN 1 \n",
					"                        ELSE 2 \n",
					"                    END\n",
					"                ELSE 1\n",
					"            END AS Currentweek,\n",
					"            \n",
					"            -- Last modified timestamp\n",
					"            CASE \n",
					"                WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_lastmodified RLIKE '^\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                                )\n",
					"                            ELSE wsr_lastmodified\n",
					"                        END AS TIMESTAMP\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS Lastmodified,\n",
					"            \n",
					"            -- Ingestion timestamp\n",
					"            CASE \n",
					"                WHEN ingested_datetime IS NOT NULL THEN\n",
					"                    TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"                ELSE current_timestamp()\n",
					"            END AS IngestionDate\n",
					"\n",
					"        FROM parsed_hours\n",
					"    \"\"\")\n",
					"    \n",
					"    # Get final record count\n",
					"    logInfo(\"Getting final record count after processing\")\n",
					"    final_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    # Data quality checks\n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    \n",
					"    # Check for records with valid work schedule rules\n",
					"    valid_rules_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with valid WorkScheduleRule: {valid_rules_count}\")\n",
					"    \n",
					"    # Check for records with parsed hours\n",
					"    parsed_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE (MoWk1 + TuWk1 + WeWk1 + ThWk1 + FrWk1 + MoWk2 + TuWk2 + WeWk2 + ThWk2 + FrWk2) > 0\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with parsed working hours: {parsed_hours_count}\")\n",
					"    \n",
					"    # Check for records with valid average weekly hours\n",
					"    avg_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE AvgWkHrs > 0 AND AvgWkHrs <= 80\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with reasonable average weekly hours (0-80): {avg_hours_count}\")\n",
					"    \n",
					"    # Add quality metrics to result\n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    \n",
					"    # Try to get current state for debugging\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"        \"\"\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"        logInfo(f\"Records remaining after error: {current_count_after_error}\")\n",
					"    except Exception as count_error:\n",
					"        logError(f\"Could not get record count after error: {str(count_error)}\")\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    \n",
					"    # Split into dataframe operations to avoid SQL escaping issues\n",
					"    from pyspark.sql import functions as F\n",
					"    \n",
					"    # Read source data\n",
					"    df = spark.table(\"odw_standardised_db.workschedulerule_weekly\")\n",
					"    \n",
					"    # Normalize description\n",
					"    df = df.withColumn(\"clean_desc\", \n",
					"        F.regexp_replace(\n",
					"            F.regexp_replace(\n",
					"                F.regexp_replace(\n",
					"                    F.regexp_replace(\n",
					"                        F.regexp_replace(F.lower(F.col(\"wsr_description\")), \n",
					"                            'monday|mon\\\\.?', 'mon'),\n",
					"                        'tuesday|tue\\\\.?', 'tue'),\n",
					"                    'wednesday|wed\\\\.?', 'wed'),\n",
					"                'thursday|thu\\\\.?|thus', 'thu'),\n",
					"            'friday|fri\\\\.?', 'fri'))\n",
					"    \n",
					"    # Extract week sections - need to use expr for dynamic positions\n",
					"    df = df.withColumn(\"lower_desc\", F.lower(F.col(\"wsr_description\")))\n",
					"    df = df.withColumn(\"week2_pos\", \n",
					"        F.when(F.locate('week 2', F.col(\"lower_desc\")) > 0, F.locate('week 2', F.col(\"lower_desc\")))\n",
					"        .when(F.locate('wk 2', F.col(\"lower_desc\")) > 0, F.locate('wk 2', F.col(\"lower_desc\")))\n",
					"        .otherwise(F.lit(0)))\n",
					"    \n",
					"    df = df.withColumn(\"week1_section\",\n",
					"        F.when(F.col(\"week2_pos\") > 0,\n",
					"            F.trim(F.expr(\"substring(lower_desc, 1, week2_pos - 1)\")))\n",
					"        .otherwise(F.col(\"lower_desc\")))\n",
					"    \n",
					"    df = df.withColumn(\"week2_section\",\n",
					"        F.when(F.col(\"week2_pos\") > 0,\n",
					"            F.trim(F.expr(\"substring(lower_desc, week2_pos, length(lower_desc))\")))\n",
					"        .otherwise(F.col(\"lower_desc\")))\n",
					"    \n",
					"    # Define parsing function for hours\n",
					"    def parse_day_hours(section_col, day_patterns, range_patterns):\n",
					"        \"\"\"Parse hours for a specific day from a week section\"\"\"\n",
					"        result = F.lit(0.0)\n",
					"        \n",
					"        # Check range patterns first (with minutes)\n",
					"        for pattern in range_patterns:\n",
					"            regex_min = f'{pattern}.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?'\n",
					"            result = F.when(F.col(section_col).rlike(regex_min),\n",
					"                F.regexp_extract(F.col(section_col), regex_min, 1).cast('double') +\n",
					"                F.coalesce(F.regexp_extract(F.col(section_col), regex_min, 2).cast('double'), F.lit(0.0)) / 60.0\n",
					"            ).otherwise(result)\n",
					"        \n",
					"        # Check range patterns without minutes\n",
					"        for pattern in range_patterns:\n",
					"            regex = f'{pattern}.*?(\\\\d+)\\\\s*hours?'\n",
					"            result = F.when(F.col(section_col).rlike(regex),\n",
					"                F.regexp_extract(F.col(section_col), regex, 1).cast('double')\n",
					"            ).otherwise(result)\n",
					"        \n",
					"        # Check individual day patterns with minutes\n",
					"        for pattern in day_patterns:\n",
					"            regex_min = f'{pattern}.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?'\n",
					"            result = F.when(F.col(section_col).rlike(regex_min),\n",
					"                F.regexp_extract(F.col(section_col), regex_min, 1).cast('double') +\n",
					"                F.coalesce(F.regexp_extract(F.col(section_col), regex_min, 2).cast('double'), F.lit(0.0)) / 60.0\n",
					"            ).otherwise(result)\n",
					"        \n",
					"        # Check individual day patterns without minutes\n",
					"        for pattern in day_patterns:\n",
					"            regex = f'{pattern}.*?(\\\\d+)\\\\s*hours?'\n",
					"            result = F.when(F.col(section_col).rlike(regex),\n",
					"                F.regexp_extract(F.col(section_col), regex, 1).cast('double')\n",
					"            ).otherwise(result)\n",
					"        \n",
					"        return result\n",
					"    \n",
					"    # Define day patterns and ranges\n",
					"    mon_ranges = ['mon-thu', 'mon-fri', 'mon-wed', 'mon-tue']\n",
					"    tue_ranges = ['tue-thu', 'mon-thu', 'mon-wed', 'tue-fri', 'mon-fri', 'mon-tue']\n",
					"    wed_ranges = ['wed-fri', 'mon-wed', 'tue-thu', 'mon-thu', 'mon-fri', 'tue-wed', 'wed-thu']\n",
					"    thu_ranges = ['thu-fri', 'tue-thu', 'mon-thu', 'mon-fri', 'wed-thu']\n",
					"    fri_ranges = ['fri', 'friday', 'mon-fri', 'thu-fri', 'wed-fri', 'tue-fri']\n",
					"    \n",
					"    # Parse Week 1\n",
					"    df = df.withColumn(\"mo_wk1\", parse_day_hours(\"week1_section\", ['monday', 'mon'], mon_ranges))\n",
					"    df = df.withColumn(\"tu_wk1\", parse_day_hours(\"week1_section\", ['tuesday', 'tue'], tue_ranges))\n",
					"    df = df.withColumn(\"we_wk1\", parse_day_hours(\"week1_section\", ['wednesday', 'wed'], wed_ranges))\n",
					"    df = df.withColumn(\"th_wk1\", parse_day_hours(\"week1_section\", ['thursday', 'thu'], thu_ranges))\n",
					"    df = df.withColumn(\"fr_wk1\", parse_day_hours(\"week1_section\", ['friday', 'fri'], fri_ranges))\n",
					"    \n",
					"    # Parse Week 2\n",
					"    df = df.withColumn(\"mo_wk2\", parse_day_hours(\"week2_section\", ['monday', 'mon'], mon_ranges))\n",
					"    df = df.withColumn(\"tu_wk2\", parse_day_hours(\"week2_section\", ['tuesday', 'tue'], tue_ranges))\n",
					"    df = df.withColumn(\"we_wk2\", parse_day_hours(\"week2_section\", ['wednesday', 'wed'], wed_ranges))\n",
					"    df = df.withColumn(\"th_wk2\", parse_day_hours(\"week2_section\", ['thursday', 'thu'], thu_ranges))\n",
					"    df = df.withColumn(\"fr_wk2\", parse_day_hours(\"week2_section\", ['friday', 'fri'], fri_ranges))\n",
					"    \n",
					"    # Calculate totals - keep as double for now\n",
					"    df = df.withColumn(\"WkHrsWk1_calc\", F.round(F.col(\"mo_wk1\") + F.col(\"tu_wk1\") + F.col(\"we_wk1\") + F.col(\"th_wk1\") + F.col(\"fr_wk1\"), 2))\n",
					"    df = df.withColumn(\"WkHrsWk2_calc\", F.round(F.col(\"mo_wk2\") + F.col(\"tu_wk2\") + F.col(\"we_wk2\") + F.col(\"th_wk2\") + F.col(\"fr_wk2\"), 2))\n",
					"    df = df.withColumn(\"AvgWkHrs_calc\", F.round((F.col(\"WkHrsWk1_calc\") + F.col(\"WkHrsWk2_calc\")) / 2, 2))\n",
					"    \n",
					"    # Date conversion - handle DD/MM/YYYY format\n",
					"    df = df.withColumn(\"date_parts\",\n",
					"        F.when(F.col(\"wsr_startdate\").isNotNull(),\n",
					"            F.split(F.col(\"wsr_startdate\"), '/')\n",
					"        ).otherwise(F.array()))\n",
					"    \n",
					"    df = df.withColumn(\"WSRstart\",\n",
					"        F.when(F.size(F.col(\"date_parts\")) == 3,\n",
					"            F.to_date(\n",
					"                F.concat(\n",
					"                    F.col(\"date_parts\")[2], F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts\")[1], 2, '0'), F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts\")[0], 2, '0')\n",
					"                ), 'yyyy-MM-dd'\n",
					"            )\n",
					"        ).otherwise(F.lit(None)))\n",
					"    \n",
					"    # Calculate current week\n",
					"    df = df.withColumn(\"Currentweek\",\n",
					"        F.when(F.col(\"WSRstart\").isNotNull(),\n",
					"            F.when((F.datediff(F.current_date(), F.col(\"WSRstart\")) / 7 % 2) == 0, 1).otherwise(2)\n",
					"        ).otherwise(1))\n",
					"    \n",
					"    # Get target table schema to match data types\n",
					"    target_schema = spark.table(\"odw_harmonised_db.sap_hr_workschedulerule\").schema\n",
					"    \n",
					"    # Build a mapping of column names to types\n",
					"    target_types = {field.name: field.dataType.simpleString() for field in target_schema}\n",
					"    \n",
					"    logInfo(f\"Target schema types: {target_types}\")\n",
					"    \n",
					"    # Convert Lastmodified properly (DD/MM/YYYY to timestamp)\n",
					"    df = df.withColumn(\"date_parts_last\",\n",
					"        F.when(F.col(\"wsr_lastmodified\").isNotNull(),\n",
					"            F.split(F.col(\"wsr_lastmodified\"), '/')\n",
					"        ).otherwise(F.array()))\n",
					"    \n",
					"    df = df.withColumn(\"Lastmodified_converted\",\n",
					"        F.when(F.size(F.col(\"date_parts_last\")) == 3,\n",
					"            F.to_timestamp(\n",
					"                F.concat(\n",
					"                    F.col(\"date_parts_last\")[2], F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts_last\")[1], 2, '0'), F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts_last\")[0], 2, '0'),\n",
					"                    F.lit(' 00:00:00')\n",
					"                ), 'yyyy-MM-dd HH:mm:ss'\n",
					"            )\n",
					"        ).otherwise(F.lit(None).cast(\"timestamp\")))\n",
					"    \n",
					"    # Select final columns with proper type casting based on target schema\n",
					"    final_df = df.select(\n",
					"        F.col(\"wsr_name\").alias(\"WorkScheduleRule\"),\n",
					"        F.col(\"wsr_code\").alias(\"WorkScheduleCode\"),\n",
					"        F.round(F.col(\"mo_wk1\"), 2).cast(target_types.get(\"MoWk1\", \"string\")).alias(\"MoWk1\"),\n",
					"        F.round(F.col(\"tu_wk1\"), 2).cast(target_types.get(\"TuWk1\", \"string\")).alias(\"TuWk1\"),\n",
					"        F.round(F.col(\"we_wk1\"), 2).cast(target_types.get(\"WeWk1\", \"string\")).alias(\"WeWk1\"),\n",
					"        F.round(F.col(\"th_wk1\"), 2).cast(target_types.get(\"ThWk1\", \"string\")).alias(\"ThWk1\"),\n",
					"        F.round(F.col(\"fr_wk1\"), 2).cast(target_types.get(\"FrWk1\", \"string\")).alias(\"FrWk1\"),\n",
					"        F.round(F.col(\"mo_wk2\"), 2).cast(target_types.get(\"MoWk2\", \"string\")).alias(\"MoWk2\"),\n",
					"        F.round(F.col(\"tu_wk2\"), 2).cast(target_types.get(\"TuWk2\", \"string\")).alias(\"TuWk2\"),\n",
					"        F.round(F.col(\"we_wk2\"), 2).cast(target_types.get(\"WeWk2\", \"string\")).alias(\"WeWk2\"),\n",
					"        F.round(F.col(\"th_wk2\"), 2).cast(target_types.get(\"ThWk2\", \"string\")).alias(\"ThWk2\"),\n",
					"        F.round(F.col(\"fr_wk2\"), 2).cast(target_types.get(\"FrWk2\", \"string\")).alias(\"FrWk2\"),\n",
					"        F.col(\"WkHrsWk1_calc\").cast(target_types.get(\"WkHrsWk1\", \"double\")).alias(\"WkHrsWk1\"),\n",
					"        F.col(\"WkHrsWk2_calc\").cast(target_types.get(\"WkHrsWk2\", \"double\")).alias(\"WkHrsWk2\"),\n",
					"        F.col(\"AvgWkHrs_calc\").cast(target_types.get(\"AvgWkHrs\", \"double\")).alias(\"AvgWkHrs\"),\n",
					"        F.col(\"WSRstart\"),\n",
					"        F.col(\"Currentweek\").cast(target_types.get(\"Currentweek\", \"string\")),\n",
					"        F.col(\"Lastmodified_converted\").alias(\"Lastmodified\"),\n",
					"        F.coalesce(F.col(\"ingested_datetime\"), F.current_timestamp()).alias(\"IngestionDate\")\n",
					"    )\n",
					"    \n",
					"    # Write to target table using SQL INSERT to handle schema properly\n",
					"    final_df.createOrReplaceTempView(\"temp_work_schedule_data\")\n",
					"    \n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule\n",
					"        SELECT * FROM temp_work_schedule_data\n",
					"    \"\"\")\n",
					"    \n",
					"    final_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    valid_rules_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\").collect()[0][0]\n",
					"    parsed_hours_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE CAST(COALESCE(MoWk1, '0') AS DOUBLE) + CAST(COALESCE(TuWk1, '0') AS DOUBLE) + CAST(COALESCE(WeWk1, '0') AS DOUBLE) + CAST(COALESCE(ThWk1, '0') AS DOUBLE) + CAST(COALESCE(FrWk1, '0') AS DOUBLE) + CAST(COALESCE(MoWk2, '0') AS DOUBLE) + CAST(COALESCE(TuWk2, '0') AS DOUBLE) + CAST(COALESCE(WeWk2, '0') AS DOUBLE) + CAST(COALESCE(ThWk2, '0') AS DOUBLE) + CAST(COALESCE(FrWk2, '0') AS DOUBLE) > 0\").collect()[0][0]\n",
					"    avg_hours_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE CAST(COALESCE(AvgWkHrs, '0') AS DOUBLE) > 0 AND CAST(COALESCE(AvgWkHrs, '0') AS DOUBLE) <= 80\").collect()[0][0]\n",
					"    \n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"    \n",
					"    # Create minimal exit value output\n",
					"    minimal_result = {\n",
					"        \"status\": result[\"status\"],\n",
					"        \"record_count\": result[\"record_count\"],\n",
					"        \"deleted_count\": result[\"deleted_count\"],\n",
					"        \"inserted_count\": result[\"inserted_count\"],\n",
					"        \"error_message\": result[\"error_message\"]\n",
					"    }\n",
					"\n",
					"except Exception as e:\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"    except:\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output minimal result - only the 4 key fields\n",
					"    if result[\"status\"] == \"success\":\n",
					"        mssparkutils.notebook.exit(json.dumps(minimal_result, indent=2))\n",
					"    else:\n",
					"        mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    \n",
					"    # Split into dataframe operations to avoid SQL escaping issues\n",
					"    from pyspark.sql import functions as F\n",
					"    \n",
					"    # Read source data\n",
					"    df = spark.table(\"odw_standardised_db.workschedulerule_weekly\")\n",
					"    \n",
					"    # Normalize description\n",
					"    df = df.withColumn(\"clean_desc\", \n",
					"        F.regexp_replace(\n",
					"            F.regexp_replace(\n",
					"                F.regexp_replace(\n",
					"                    F.regexp_replace(\n",
					"                        F.regexp_replace(F.lower(F.col(\"wsr_description\")), \n",
					"                            'monday|mon\\\\.?', 'mon'),\n",
					"                        'tuesday|tue\\\\.?', 'tue'),\n",
					"                    'wednesday|wed\\\\.?', 'wed'),\n",
					"                'thursday|thu\\\\.?|thus', 'thu'),\n",
					"            'friday|fri\\\\.?', 'fri'))\n",
					"    \n",
					"    # Extract week sections - need to use expr for dynamic positions\n",
					"    df = df.withColumn(\"lower_desc\", F.lower(F.col(\"wsr_description\")))\n",
					"    df = df.withColumn(\"week2_pos\", \n",
					"        F.when(F.locate('week 2', F.col(\"lower_desc\")) > 0, F.locate('week 2', F.col(\"lower_desc\")))\n",
					"        .when(F.locate('wk 2', F.col(\"lower_desc\")) > 0, F.locate('wk 2', F.col(\"lower_desc\")))\n",
					"        .otherwise(F.lit(0)))\n",
					"    \n",
					"    df = df.withColumn(\"week1_section\",\n",
					"        F.when(F.col(\"week2_pos\") > 0,\n",
					"            F.trim(F.expr(\"substring(lower_desc, 1, week2_pos - 1)\")))\n",
					"        .otherwise(F.col(\"lower_desc\")))\n",
					"    \n",
					"    df = df.withColumn(\"week2_section\",\n",
					"        F.when(F.col(\"week2_pos\") > 0,\n",
					"            F.trim(F.expr(\"substring(lower_desc, week2_pos, length(lower_desc))\")))\n",
					"        .otherwise(F.col(\"lower_desc\")))\n",
					"    \n",
					"    # Define parsing function for hours - simplified and explicit\n",
					"    def parse_day_hours(section_col, day_patterns, range_patterns):\n",
					"        \"\"\"Parse hours for a specific day from a week section\"\"\"\n",
					"        col = F.col(section_col)\n",
					"        result = F.lit(0.0)\n",
					"        \n",
					"        # Process all patterns (ranges first, then individual days)\n",
					"        all_patterns = range_patterns + day_patterns\n",
					"        \n",
					"        for pattern in all_patterns:\n",
					"            # Try to match: \"pattern X hours Y minutes\" or \"pattern X hours Y min\"\n",
					"            regex_with_min = f'{pattern}[^0-9]*(\\\\d+)\\\\s*hours?\\\\s+(\\\\d+)\\\\s*min'\n",
					"            \n",
					"            # Try to match: \"pattern X hours\" (no minutes following)\n",
					"            regex_only_hours = f'{pattern}[^0-9]*(\\\\d+)\\\\s*hours?(?:\\\\s|$|[^0-9])'\n",
					"            \n",
					"            # First check if minutes exist\n",
					"            has_minutes = col.rlike(regex_with_min)\n",
					"            \n",
					"            result = F.when(\n",
					"                has_minutes,\n",
					"                # Has minutes: extract hours + (minutes/60)\n",
					"                F.regexp_extract(col, regex_with_min, 1).cast('double') +\n",
					"                (F.regexp_extract(col, regex_with_min, 2).cast('double') / 60.0)\n",
					"            ).when(\n",
					"                col.rlike(regex_only_hours),\n",
					"                # Only hours: extract hours\n",
					"                F.regexp_extract(col, regex_only_hours, 1).cast('double')\n",
					"            ).otherwise(result)\n",
					"        \n",
					"        return result\n",
					"    \n",
					"    # Define day patterns and ranges\n",
					"    mon_ranges = ['mon-thu', 'mon-fri', 'mon-wed', 'mon-tue']\n",
					"    tue_ranges = ['tue-thu', 'mon-thu', 'mon-wed', 'tue-fri', 'mon-fri', 'mon-tue']\n",
					"    wed_ranges = ['wed-fri', 'mon-wed', 'tue-thu', 'mon-thu', 'mon-fri', 'tue-wed', 'wed-thu']\n",
					"    thu_ranges = ['thu-fri', 'tue-thu', 'mon-thu', 'mon-fri', 'wed-thu']\n",
					"    fri_ranges = ['fri', 'friday', 'mon-fri', 'thu-fri', 'wed-fri', 'tue-fri']\n",
					"    \n",
					"    # Parse Week 1\n",
					"    df = df.withColumn(\"mo_wk1\", parse_day_hours(\"week1_section\", ['monday', 'mon'], mon_ranges))\n",
					"    df = df.withColumn(\"tu_wk1\", parse_day_hours(\"week1_section\", ['tuesday', 'tue'], tue_ranges))\n",
					"    df = df.withColumn(\"we_wk1\", parse_day_hours(\"week1_section\", ['wednesday', 'wed'], wed_ranges))\n",
					"    df = df.withColumn(\"th_wk1\", parse_day_hours(\"week1_section\", ['thursday', 'thu'], thu_ranges))\n",
					"    df = df.withColumn(\"fr_wk1\", parse_day_hours(\"week1_section\", ['friday', 'fri'], fri_ranges))\n",
					"    \n",
					"    # Parse Week 2\n",
					"    df = df.withColumn(\"mo_wk2\", parse_day_hours(\"week2_section\", ['monday', 'mon'], mon_ranges))\n",
					"    df = df.withColumn(\"tu_wk2\", parse_day_hours(\"week2_section\", ['tuesday', 'tue'], tue_ranges))\n",
					"    df = df.withColumn(\"we_wk2\", parse_day_hours(\"week2_section\", ['wednesday', 'wed'], wed_ranges))\n",
					"    df = df.withColumn(\"th_wk2\", parse_day_hours(\"week2_section\", ['thursday', 'thu'], thu_ranges))\n",
					"    df = df.withColumn(\"fr_wk2\", parse_day_hours(\"week2_section\", ['friday', 'fri'], fri_ranges))\n",
					"    \n",
					"    # Calculate totals - keep as double for now\n",
					"    df = df.withColumn(\"WkHrsWk1_calc\", F.round(F.col(\"mo_wk1\") + F.col(\"tu_wk1\") + F.col(\"we_wk1\") + F.col(\"th_wk1\") + F.col(\"fr_wk1\"), 2))\n",
					"    df = df.withColumn(\"WkHrsWk2_calc\", F.round(F.col(\"mo_wk2\") + F.col(\"tu_wk2\") + F.col(\"we_wk2\") + F.col(\"th_wk2\") + F.col(\"fr_wk2\"), 2))\n",
					"    df = df.withColumn(\"AvgWkHrs_calc\", F.round((F.col(\"WkHrsWk1_calc\") + F.col(\"WkHrsWk2_calc\")) / 2, 2))\n",
					"    \n",
					"    # Date conversion - handle DD/MM/YYYY format\n",
					"    df = df.withColumn(\"date_parts\",\n",
					"        F.when(F.col(\"wsr_startdate\").isNotNull(),\n",
					"            F.split(F.col(\"wsr_startdate\"), '/')\n",
					"        ).otherwise(F.array()))\n",
					"    \n",
					"    df = df.withColumn(\"WSRstart\",\n",
					"        F.when(F.size(F.col(\"date_parts\")) == 3,\n",
					"            F.to_date(\n",
					"                F.concat(\n",
					"                    F.col(\"date_parts\")[2], F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts\")[1], 2, '0'), F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts\")[0], 2, '0')\n",
					"                ), 'yyyy-MM-dd'\n",
					"            )\n",
					"        ).otherwise(F.lit(None)))\n",
					"    \n",
					"    # Calculate current week\n",
					"    df = df.withColumn(\"Currentweek\",\n",
					"        F.when(F.col(\"WSRstart\").isNotNull(),\n",
					"            F.when((F.datediff(F.current_date(), F.col(\"WSRstart\")) / 7 % 2) == 0, 1).otherwise(2)\n",
					"        ).otherwise(1))\n",
					"    \n",
					"    # Get target table schema to match data types\n",
					"    target_schema = spark.table(\"odw_harmonised_db.sap_hr_workschedulerule\").schema\n",
					"    \n",
					"    # Build a mapping of column names to types\n",
					"    target_types = {field.name: field.dataType.simpleString() for field in target_schema}\n",
					"    \n",
					"    logInfo(f\"Target schema types: {target_types}\")\n",
					"    \n",
					"    # Convert Lastmodified properly (DD/MM/YYYY to timestamp)\n",
					"    df = df.withColumn(\"date_parts_last\",\n",
					"        F.when(F.col(\"wsr_lastmodified\").isNotNull(),\n",
					"            F.split(F.col(\"wsr_lastmodified\"), '/')\n",
					"        ).otherwise(F.array()))\n",
					"    \n",
					"    df = df.withColumn(\"Lastmodified_converted\",\n",
					"        F.when(F.size(F.col(\"date_parts_last\")) == 3,\n",
					"            F.to_timestamp(\n",
					"                F.concat(\n",
					"                    F.col(\"date_parts_last\")[2], F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts_last\")[1], 2, '0'), F.lit('-'),\n",
					"                    F.lpad(F.col(\"date_parts_last\")[0], 2, '0'),\n",
					"                    F.lit(' 00:00:00')\n",
					"                ), 'yyyy-MM-dd HH:mm:ss'\n",
					"            )\n",
					"        ).otherwise(F.lit(None).cast(\"timestamp\")))\n",
					"    \n",
					"    # Select final columns with proper type casting based on target schema\n",
					"    final_df = df.select(\n",
					"        F.col(\"wsr_name\").alias(\"WorkScheduleRule\"),\n",
					"        F.col(\"wsr_code\").alias(\"WorkScheduleCode\"),\n",
					"        F.round(F.col(\"mo_wk1\"), 2).cast(target_types.get(\"MoWk1\", \"string\")).alias(\"MoWk1\"),\n",
					"        F.round(F.col(\"tu_wk1\"), 2).cast(target_types.get(\"TuWk1\", \"string\")).alias(\"TuWk1\"),\n",
					"        F.round(F.col(\"we_wk1\"), 2).cast(target_types.get(\"WeWk1\", \"string\")).alias(\"WeWk1\"),\n",
					"        F.round(F.col(\"th_wk1\"), 2).cast(target_types.get(\"ThWk1\", \"string\")).alias(\"ThWk1\"),\n",
					"        F.round(F.col(\"fr_wk1\"), 2).cast(target_types.get(\"FrWk1\", \"string\")).alias(\"FrWk1\"),\n",
					"        F.round(F.col(\"mo_wk2\"), 2).cast(target_types.get(\"MoWk2\", \"string\")).alias(\"MoWk2\"),\n",
					"        F.round(F.col(\"tu_wk2\"), 2).cast(target_types.get(\"TuWk2\", \"string\")).alias(\"TuWk2\"),\n",
					"        F.round(F.col(\"we_wk2\"), 2).cast(target_types.get(\"WeWk2\", \"string\")).alias(\"WeWk2\"),\n",
					"        F.round(F.col(\"th_wk2\"), 2).cast(target_types.get(\"ThWk2\", \"string\")).alias(\"ThWk2\"),\n",
					"        F.round(F.col(\"fr_wk2\"), 2).cast(target_types.get(\"FrWk2\", \"string\")).alias(\"FrWk2\"),\n",
					"        F.col(\"WkHrsWk1_calc\").cast(target_types.get(\"WkHrsWk1\", \"double\")).alias(\"WkHrsWk1\"),\n",
					"        F.col(\"WkHrsWk2_calc\").cast(target_types.get(\"WkHrsWk2\", \"double\")).alias(\"WkHrsWk2\"),\n",
					"        F.col(\"AvgWkHrs_calc\").cast(target_types.get(\"AvgWkHrs\", \"double\")).alias(\"AvgWkHrs\"),\n",
					"        F.col(\"WSRstart\"),\n",
					"        F.col(\"Currentweek\").cast(target_types.get(\"Currentweek\", \"string\")),\n",
					"        F.col(\"Lastmodified_converted\").alias(\"Lastmodified\"),\n",
					"        F.coalesce(F.col(\"ingested_datetime\"), F.current_timestamp()).alias(\"IngestionDate\")\n",
					"    )\n",
					"    \n",
					"    # Write to target table using SQL INSERT to handle schema properly\n",
					"    final_df.createOrReplaceTempView(\"temp_work_schedule_data\")\n",
					"    \n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule\n",
					"        SELECT * FROM temp_work_schedule_data\n",
					"    \"\"\")\n",
					"    \n",
					"    final_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    valid_rules_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\").collect()[0][0]\n",
					"    parsed_hours_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE CAST(COALESCE(MoWk1, '0') AS DOUBLE) + CAST(COALESCE(TuWk1, '0') AS DOUBLE) + CAST(COALESCE(WeWk1, '0') AS DOUBLE) + CAST(COALESCE(ThWk1, '0') AS DOUBLE) + CAST(COALESCE(FrWk1, '0') AS DOUBLE) + CAST(COALESCE(MoWk2, '0') AS DOUBLE) + CAST(COALESCE(TuWk2, '0') AS DOUBLE) + CAST(COALESCE(WeWk2, '0') AS DOUBLE) + CAST(COALESCE(ThWk2, '0') AS DOUBLE) + CAST(COALESCE(FrWk2, '0') AS DOUBLE) > 0\").collect()[0][0]\n",
					"    avg_hours_count = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule WHERE CAST(COALESCE(AvgWkHrs, '0') AS DOUBLE) > 0 AND CAST(COALESCE(AvgWkHrs, '0') AS DOUBLE) <= 80\").collect()[0][0]\n",
					"    \n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"    \n",
					"    # Create minimal exit value output\n",
					"    minimal_result = {\n",
					"        \"status\": result[\"status\"],\n",
					"        \"record_count\": result[\"record_count\"],\n",
					"        \"deleted_count\": result[\"deleted_count\"],\n",
					"        \"inserted_count\": result[\"inserted_count\"],\n",
					"        \"error_message\": result[\"error_message\"]\n",
					"    }\n",
					"\n",
					"except Exception as e:\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"    except:\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output minimal result - only the 4 key fields\n",
					"    if result[\"status\"] == \"success\":\n",
					"        mssparkutils.notebook.exit(json.dumps(minimal_result, indent=2))\n",
					"    else:\n",
					"        mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}