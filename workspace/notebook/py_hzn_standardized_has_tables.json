{
	"name": "py_hzn_standardized_has_tables",
	"properties": {
		"folder": {
			"name": "odw-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b4d95ea-0a94-4399-a981-92fcc4a52d89"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Purpose\n",
					"The purpose of this PySpark Notebook is to ingest Horizon Data into a single Delta Table: **odw_standardised_db.horizon_appeal_has**\n",
					"\n",
					"### Description\n",
					"##### This Notebook: \n",
					"- Reads from multiple odw_standardised_db Delta table sources.\n",
					"- Transforms and unifies the data into odw_standardised_db.horizon_appeal_has.\n",
					"- Logs audit information to Application Insights by creating a JSON dump at notebook exit.\n",
					"\n",
					"**Spark Cluster Configuration**\n",
					"- Apache Spark Version: 3.4\n",
					"- Python Version: 3.10\n",
					"- Delta Lake Version: 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Imports"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"from datetime import datetime\n",
					"from pyspark.sql import DataFrame"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Configuration & Run variables"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"table_name = \"odw_standardised_db.horizon_appeal_has\"\n",
					"\n",
					"# Initialise variables for Logging and Tracking\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message = \"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load latest Snapshot of a STD table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def get_spark_df(table_name: str) -> DataFrame:\n",
					"    df = spark.table(table_name)\n",
					"    # pick the most recent snapshot if the table is time-sliced\n",
					"    max_date = df.agg(F.max(\"expected_from\")).collect()[0][0]\n",
					"    df_filtered = df.filter(F.col(\"expected_from\") == max_date)\n",
					"    return df_filtered"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load all required Horizon views as DataFrame"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    hzn_cases_has_df = get_spark_df(\"odw_standardised_db.HorizonCases_Has\")\n",
					"\n",
					"    # Common (same as s78)\n",
					"    cases_specialism_df = get_spark_df(\"odw_standardised_db.cases_specialisms\")\n",
					"    vw_case_dates_df = get_spark_df(\"odw_standardised_db.vw_case_dates\")\n",
					"    CaseDocumentDatesDates_df = get_spark_df(\"odw_standardised_db.casedocumentdatesdates\")\n",
					"    CaseSiteStrings_df = get_spark_df(\"odw_standardised_db.casesitestrings\")\n",
					"    TypeOfProcedure_df = get_spark_df(\"odw_standardised_db.typeofprocedure\")\n",
					"    vw_AddAdditionalData_df = get_spark_df(\"odw_standardised_db.vw_addadditionaldata\")\n",
					"    vw_AdditionalFields_df = get_spark_df(\"odw_standardised_db.vw_additionalfields\")\n",
					"\n",
					"    # HAS extra / BIS sources from the ticket\n",
					"    Horizon_vw_curr_TypeOfLevel_df          = get_spark_df(\"odw_standardised_db.TypeOfLevel\")\n",
					"    Horizon_vw_BIS_SpecialistCaseDates_df   = get_spark_df(\"odw_standardised_db.horizon_specialist_case_dates\")\n",
					"    Horizon_vw_BIS_PlanningAppStrings_df    = get_spark_df(\"odw_standardised_db.PlanningAppStrings\")\n",
					"    Horizon_vw_BIS_PlanningAppDates_df      = get_spark_df(\"odw_standardised_db.PlanningAppDates\")\n",
					"    Horizon_vw_BIS_LeadCase_df              = get_spark_df(\"odw_standardised_db.BIS_LeadCase\")\n",
					"    Horizon_vw_BIS_CaseStrings_df           = get_spark_df(\"odw_standardised_db.CaseStrings\")\n",
					"    Horizon_vw_BIS_CaseInfo_df              = get_spark_df(\"odw_standardised_db.horizon_case_info\")\n",
					"    Horizon_vw_BIS_CaseDates_df             = get_spark_df(\"odw_standardised_db.horizon_case_dates\")\n",
					"    Horizon_vw_BIS_AppealsAdditionalData_df = get_spark_df(\"odw_standardised_db.horizon_appeals_additional_data\")\n",
					"\n",
					"    # Additional HAS views from ticket\n",
					"    Horizon_vw_BIS_CaseSiteCategoryAdditionalStr_df = get_spark_df(\"odw_standardised_db.BIS_CaseSiteCategoryAdditionalStr\")\n",
					"    Horizon_ODW_vw_Inspector_Cases_df               = get_spark_df(\"odw_standardised_db.horizon_inspector_cases\")\n",
					"\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = logError(f\"Error in data frame creation :\\n{e}\")\n",
					"    end_exec_time = datetime.now() \n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### SQL Assembly (joins, dedup, renames)\n",
					"\n",
					"**Purpose:**  \n",
					"Reproduce the *appeal_s78* logic using HAS sources, applying all Group A mappings and ensuring one clean, deduplicated record per case.\n",
					"\n",
					"#### What this does\n",
					"\n",
					"- **`cs_agg`**  \n",
					"  - Collapses multiple specialisms into a single comma-separated string.\n",
					"\n",
					"- **`css_1row`**\n",
					"  - Dedupes **CaseSiteStrings** to one row per `casenodeid` using deterministic ordering\n",
					"    (`expected_from`, `modified_datetime`, `ingested_datetime`, `file_id`)\n",
					"  - Prevents 1N fan-out when joining address data\n",
					"\n",
					"- **`base`**  \n",
					"  - Joins the stable Horizon views (dates, strings, additional fields) to the HAS case view  \n",
					"\n",
					"- **`*_1row` CTEs** (e.g. `pas_1row`, `pad_1row`, `lc_1row`, `cs2_1row`, `ci_1row`, `cdh_1row`, `scd_1row`, `aad_1row`)  \n",
					"  - Select the most recent record per key using deterministic ordering  \n",
					"    (`expected_from`, `modified_datetime`, `ingested_datetime`, `file_id`)  \n",
					"  - Ensures a single up-to-date row per source entity — identical to the s78 pattern\n",
					"\n",
					"- **`tp_1row`**\n",
					"  - Dedupes **TypeOfProcedure** and builds a canonical join key from `tp.name`\n",
					"    (upper-case, whitespace and punctuation stripped)\n",
					"  - Enables robust joins to both appeallant and LPA procedure values  \n",
					"\n",
					"- **`add_typeoflevel`**  \n",
					"  - Maps `Level` → `allocationLevel`, `allocationBand`  \n",
					"\n",
					"- **`add_planning`**  \n",
					"  - Adds planning string/date fields from `pas_1row` and `pad_1row`:  \n",
					"    `applicationReference`, `typeOfPlanningApplication`,  \n",
					"    `applicationDate`, and `applicationDecisionDate`  \n",
					"\n",
					"- **`add_case_refs`**  \n",
					"  - Enriches with case attributes from `lc_1row`, `cs2_1row` and `ci_1row`  \n",
					"    `caseStatus`, `lpaCode`, `linkedCaseStatus`,  \n",
					"    `leadCaseReference`, `caseDecisionOutcome`,  \n",
					"    `jurisdiction`, `redeterminedIndicator` and `caseValidationOutcome`  \n",
					"\n",
					"- **`add_dates`**  \n",
					"  - Adds date attributes from `cdh_1row` and `scd_1row`:\n",
					"    `caseValidationDate` and `dateCostsReportDespatched`  \n",
					"\n",
					"- **`add_aad`**  \n",
					"  - Brings in additional fields such as  \n",
					"    `originalDevelopmentDescription`, `appeallantStatementSubmittedDate`,\n",
					"    `appellantCommentsSubmittedDate`, `lpaCommentsSubmittedDate`\n",
					"    `lpaStatementSubmittedDate`, `lpaProofsSubmittedDate`,\n",
					"    `siteNoticesSentDate`, `statementDueDate`, `areaOfSiteInHectares`\n",
					"  - Normalises procedure text from both appellant and LPA sides (e.g. `WR`, `WRITTEN REPS`)\n",
					"  - Builds canonical procedure keys for consistent joining \n",
					"\n",
					"- **`add_proc_inspector_geo`**  \n",
					"  - Determines the **final** `caseProcedure` using the following fallback logic:\n",
					"    1. `tp.proccode` (appellant or LPA)\n",
					"    2. Normalised AAD alias values\n",
					"    3. Standardises to `WR` / `IH` / `LI` or `NULL` if not derivable\n",
					"  - Adds data  \n",
					"    `inspectorId`, `isGreenBelt`, `inConservationArea` and address fields\n",
					"\n",
					"\n",
					"#### Final Output\n",
					"\n",
					"- The **final SELECT** renames everything to the Group A / SB-aligned schema so the Harmonised layer can safely `unionByName`  \n",
					"- Includes all key Group A columns\n",
					"- **Row Safety**: Row count = HAS row count (31,628)\n",
					"- **Duplicate parity**: If the HAS source contains duplicate `CaseNoId` or `caseUniqueId` \n",
					"    it preserves them - no new duplication is introduced\n",
					"- `caseProcedure` is populated for approx = 99.6% of rows; remaining `NULL` values indicate missing or unclassified \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# 1) Register temp views (tp is no longer needed; harmless if left)\n",
					"def register_views():\n",
					"    hzn_cases_has_df.createOrReplaceTempView(\"h\")\n",
					"    cases_specialism_df.createOrReplaceTempView(\"cs\")\n",
					"    vw_case_dates_df.createOrReplaceTempView(\"cd\")\n",
					"    CaseDocumentDatesDates_df.createOrReplaceTempView(\"cdd\")\n",
					"    CaseSiteStrings_df.createOrReplaceTempView(\"css\")\n",
					"    vw_AddAdditionalData_df.createOrReplaceTempView(\"aad_old\")\n",
					"    vw_AdditionalFields_df.createOrReplaceTempView(\"af\")\n",
					"    # TypeOfProcedure_df.createOrReplaceTempView(\"tp\")  # <- not used anymore\n",
					"\n",
					"    Horizon_vw_curr_TypeOfLevel_df.createOrReplaceTempView(\"ctl\")\n",
					"    Horizon_vw_BIS_SpecialistCaseDates_df.createOrReplaceTempView(\"scd\")\n",
					"    Horizon_vw_BIS_PlanningAppStrings_df.createOrReplaceTempView(\"pas\")\n",
					"    Horizon_vw_BIS_PlanningAppDates_df.createOrReplaceTempView(\"pad\")\n",
					"    Horizon_vw_BIS_LeadCase_df.createOrReplaceTempView(\"lc\")\n",
					"    Horizon_vw_BIS_CaseStrings_df.createOrReplaceTempView(\"cs2\")\n",
					"    Horizon_vw_BIS_CaseInfo_df.createOrReplaceTempView(\"ci\")\n",
					"    Horizon_vw_BIS_CaseDates_df.createOrReplaceTempView(\"cdh\")\n",
					"    Horizon_vw_BIS_AppealsAdditionalData_df.createOrReplaceTempView(\"aad\")\n",
					"\n",
					"    Horizon_vw_BIS_CaseSiteCategoryAdditionalStr_df.createOrReplaceTempView(\"sce\")\n",
					"    Horizon_ODW_vw_Inspector_Cases_df.createOrReplaceTempView(\"ic\")\n",
					"\n",
					"register_views()\n",
					"\n",
					"# 2) model SQL\n",
					"sql_text = \"\"\"\n",
					"WITH\n",
					"-- collapse multiple specialisms per case into one comma-separated string\n",
					"cs_agg AS (\n",
					"  SELECT\n",
					"    casereference,\n",
					"    concat_ws(', ', sort_array(collect_set(trim(casespecialism)))) AS casespecialism\n",
					"  FROM cs\n",
					"  WHERE casespecialism IS NOT NULL AND trim(casespecialism) <> ''\n",
					"  GROUP BY casereference\n",
					"),\n",
					"\n",
					"-- make CaseSiteStrings 1-row per casenodeid to avoid 1 N joins\n",
					"css_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT c.*,\n",
					"           ROW_NUMBER() OVER (\n",
					"             PARTITION BY c.casenodeid\n",
					"             ORDER BY c.expected_from DESC, c.modified_datetime DESC, c.ingested_datetime DESC, c.file_id DESC\n",
					"           ) rn\n",
					"    FROM css c\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"\n",
					"base AS (\n",
					"  SELECT\n",
					"    h.*,\n",
					"    cs_agg.casespecialism,\n",
					"    cd.receiptdate,\n",
					"    cd.appealdocscomplete,\n",
					"    cd.startdate,\n",
					"    cd.appealwithdrawndate,\n",
					"    cd.casedecisiondate,\n",
					"    cd.datenotrecoveredorderecovered,\n",
					"    cd.daterecovered,\n",
					"    cd.originalcasedecisiondate,\n",
					"    cdd.questionnairedue,\n",
					"    cdd.questionnairereceived,\n",
					"    cdd.interestedpartyrepsduedate,\n",
					"    cdd.proofsdue,\n",
					"    css_1row.siteviewablefromroad,\n",
					"    aad_old.floorspaceinsquaremetres,\n",
					"    aad_old.costsappliedforindicator,\n",
					"    aad_old.procedureappellant,\n",
					"    aad_old.isthesitewithinanaonb,\n",
					"    aad_old.procedurelpa,\n",
					"    aad_old.inspectorneedtoentersite,\n",
					"    aad_old.sitegridreferenceeasting,\n",
					"    aad_old.sitegridreferencenorthing,\n",
					"    aad_old.sitewithinsssi,\n",
					"    af.importantinformation,\n",
					"    aad_old.level AS level_code\n",
					"  FROM h\n",
					"  LEFT JOIN cs_agg    ON h.caseuniqueid = cs_agg.casereference\n",
					"  LEFT JOIN cd        ON h.casenodeid  = cd.casenodeid\n",
					"  LEFT JOIN cdd       ON h.casenodeid  = cdd.casenodeid\n",
					"  LEFT JOIN css_1row  ON h.casenodeid  = css_1row.casenodeid\n",
					"  LEFT JOIN aad_old   ON h.caseuniqueid = aad_old.appealrefnumber\n",
					"  LEFT JOIN af        ON h.caseuniqueid = af.appealrefnumber\n",
					"),\n",
					"\n",
					"-- 1-row per key for each source\n",
					"pas_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT p.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY p.casenodeid\n",
					"             ORDER BY p.expected_from DESC, p.modified_datetime DESC, p.ingested_datetime DESC, p.file_id DESC) rn\n",
					"    FROM pas p\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"pad_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT p.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY p.casenodeid\n",
					"             ORDER BY p.expected_from DESC, p.modified_datetime DESC, p.ingested_datetime DESC, p.file_id DESC) rn\n",
					"    FROM pad p\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"lc_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.casenodeid\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM lc x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"cs2_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.casenodeid\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM cs2 x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"ci_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.appealrefnumber\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM ci x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"cdh_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.appealrefnumber\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM cdh x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"scd_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.appealrefnumber\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM scd x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"aad_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT x.*,\n",
					"           ROW_NUMBER() OVER (PARTITION BY x.appealrefnumber\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC) rn\n",
					"    FROM aad x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"\n",
					"sce_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT\n",
					"      x.AppealRefNumber        AS appealrefnumber,\n",
					"      x.SiteWithinAGreenBelt   AS greenbelt,\n",
					"      x.InCARelatesToCA        AS incarelatestoca,\n",
					"      x.expected_from,\n",
					"      x.modified_datetime,\n",
					"      x.ingested_datetime,\n",
					"      x.file_id,\n",
					"      ROW_NUMBER() OVER (\n",
					"        PARTITION BY x.AppealRefNumber\n",
					"        ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\n",
					"      ) rn\n",
					"    FROM sce x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"\n",
					"ic_1row AS (\n",
					"  SELECT * FROM (\n",
					"    SELECT\n",
					"      x.appealrefnumber,\n",
					"      x.contactid AS inspectorid,\n",
					"      x.expected_from,\n",
					"      x.modified_datetime,\n",
					"      x.ingested_datetime,\n",
					"      x.file_id,\n",
					"      ROW_NUMBER() OVER (\n",
					"        PARTITION BY x.appealrefnumber\n",
					"        ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\n",
					"      ) rn\n",
					"    FROM ic x\n",
					"  ) t WHERE rn = 1\n",
					"),\n",
					"\n",
					"add_typeoflevel AS (\n",
					"  SELECT b.*, ctl.name AS allocationLevel, ctl.band AS allocationBand\n",
					"  FROM base b\n",
					"  LEFT JOIN ctl ON b.level_code = ctl.name\n",
					"),\n",
					"\n",
					"add_planning AS (\n",
					"  SELECT\n",
					"    t.*,\n",
					"    pas.lpaapplicationreference  AS applicationReference,\n",
					"    pas.planningapplicationtype  AS typeOfPlanningApplication,\n",
					"    pad.dateofapplication        AS applicationDate,\n",
					"    pad.dateoflpadecision        AS applicationDecisionDate\n",
					"  FROM add_typeoflevel t\n",
					"  LEFT JOIN pas_1row pas ON t.casenodeid = pas.casenodeid\n",
					"  LEFT JOIN pad_1row pad ON t.casenodeid = pad.casenodeid\n",
					"),\n",
					"\n",
					"add_case_refs AS (\n",
					"  SELECT\n",
					"    p.*,\n",
					"    lc.leadcasenodeid      AS leadCaseReference,\n",
					"    cs2.processingstate    AS caseStatus,\n",
					"    cs2.lpacode            AS lpaCode,\n",
					"    cs2.linkedstatus       AS linkedCaseStatus,\n",
					"    cs2.decision           AS caseDecisionOutcome,\n",
					"    cs2.jurisdiction       AS jurisdiction,\n",
					"    cs2.redetermined       AS redeterminedIndicator,\n",
					"    ci.validity            AS caseValidationOutcome\n",
					"  FROM add_planning p\n",
					"  LEFT JOIN lc_1row  lc  ON p.casenodeid   = lc.casenodeid\n",
					"  LEFT JOIN cs2_1row cs2 ON p.casenodeid   = cs2.casenodeid\n",
					"  LEFT JOIN ci_1row  ci  ON p.caseuniqueid = ci.appealrefnumber\n",
					"),\n",
					"\n",
					"add_dates AS (\n",
					"  SELECT\n",
					"    c.*,\n",
					"    cdh.validitystatusdate        AS caseValidationDate,\n",
					"    scd.datecostsreportdespatched AS dateCostsReportDespatched\n",
					"  FROM add_case_refs c\n",
					"  LEFT JOIN cdh_1row cdh ON c.caseuniqueid = cdh.appealrefnumber\n",
					"  LEFT JOIN scd_1row scd ON c.caseuniqueid = scd.appealrefnumber\n",
					"),\n",
					"\n",
					"-- add AAD + small alias normalisation\n",
					"add_aad AS (\n",
					"  SELECT\n",
					"    d.*,\n",
					"    aad.developmentorallegation     AS originalDevelopmentDescription,\n",
					"    aad.appellantcommentssubmitted  AS appellantCommentsSubmittedDate,\n",
					"    aad.appellantstatementsubmitted AS appellantStatementSubmittedDate,\n",
					"    aad.lpacommentssubmitted        AS lpaCommentsSubmittedDate,\n",
					"    aad.lpaproofssubmitted          AS lpaProofsSubmittedDate,\n",
					"    aad.lpastatementsubmitted       AS lpaStatementSubmittedDate,\n",
					"    aad.sitenoticesent              AS siteNoticesSentDate,\n",
					"    aad.statementsdue               AS statementDueDate,\n",
					"    aad.areaofsiteinhectares        AS areaofsiteinhectares,\n",
					"    d.procedureappellant            AS proc_app_raw,\n",
					"    d.procedurelpa                  AS proc_lpa_raw,\n",
					"\n",
					"    -- alias normalisation (Before the normalisation caseProcedure was 0 / 31 628 non-null)\n",
					"    -- After adding it we got 31,498 non-null\n",
					"    -- So the block produced 31,498 fills\n",
					"    CASE\n",
					"      WHEN UPPER(TRIM(d.procedureappellant)) IN ('WR','WRITTEN REPS','WRITTEN REP','WRITTEN REPRESENTATION','WRITTEN REPRESENTATIONS')\n",
					"        THEN 'WRITTEN REPRESENTATIONS'\n",
					"      WHEN UPPER(TRIM(d.procedureappellant)) IN ('HEARING','HEARINGS') THEN 'HEARING'\n",
					"      WHEN UPPER(TRIM(d.procedureappellant)) IN ('INQ','INQUIRY','INQUIRIES','PUBLIC INQUIRY','INQUIRY (VIRTUAL)','INQUIRY(VIRTUAL)')\n",
					"        THEN 'INQUIRY'\n",
					"      ELSE UPPER(TRIM(d.procedureappellant))\n",
					"    END AS proc_app_alias,\n",
					"\n",
					"    CASE\n",
					"      WHEN UPPER(TRIM(d.procedurelpa)) IN ('WR','WRITTEN REPS','WRITTEN REP','WRITTEN REPRESENTATION','WRITTEN REPRESENTATIONS')\n",
					"        THEN 'WRITTEN REPRESENTATIONS'\n",
					"      WHEN UPPER(TRIM(d.procedurelpa)) IN ('HEARING','HEARINGS') THEN 'HEARING'\n",
					"      WHEN UPPER(TRIM(d.procedurelpa)) IN ('INQ','INQUIRY','INQUIRIES','PUBLIC INQUIRY','INQUIRY (VIRTUAL)','INQUIRY(VIRTUAL)')\n",
					"        THEN 'INQUIRY'\n",
					"      ELSE UPPER(TRIM(d.procedurelpa))\n",
					"    END AS proc_lpa_alias\n",
					"\n",
					"  FROM add_dates d\n",
					"  LEFT JOIN aad_1row aad ON d.caseuniqueid = aad.appealrefnumber\n",
					"),\n",
					"\n",
					"-- Bring in inspector + SCE + CASE PROCEDURE mapped directly from AAD aliases\n",
					"add_proc_inspector_geo AS (\n",
					"  SELECT\n",
					"    a.*,\n",
					"\n",
					"    -- raw case procedure prefer appellant alias, then LPA alias\n",
					"    COALESCE(NULLIF(proc_app_alias,''), NULLIF(proc_lpa_alias,'')) AS caseProcedure_raw,\n",
					"\n",
					"    -- standardise to WR / IH / LI where possible\n",
					"    CASE\n",
					"      WHEN UPPER(TRIM(COALESCE(proc_app_alias, proc_lpa_alias))) IN\n",
					"           ('WR','WRITTENREPRESENTATIONS','WRITTEN REPRESENTATIONS','WRITTEN REPS','WRITTEN REP','WRITTEN REPRESENTATION')\n",
					"        THEN 'WR'\n",
					"      WHEN UPPER(TRIM(COALESCE(proc_app_alias, proc_lpa_alias))) IN\n",
					"           ('IH','INFORMALHEARING','INFORMAL HEARING','HEARING','HEARINGS')\n",
					"        THEN 'IH'\n",
					"      WHEN UPPER(TRIM(COALESCE(proc_app_alias, proc_lpa_alias))) IN\n",
					"           ('LI','LOCALINQUIRY','LOCAL INQUIRY','INQUIRY','INQ','INQUIRIES','PUBLIC INQUIRY','INQUIRY (VIRTUAL)','INQUIRY(VIRTUAL)')\n",
					"        THEN 'LI'\n",
					"      ELSE NULL\n",
					"    END AS caseProcedure,\n",
					"\n",
					"    ic_1row.inspectorid       AS inspectorId,\n",
					"    sce_1row.greenbelt        AS isGreenBelt,\n",
					"    sce_1row.incarelatestoca  AS inConservationArea,\n",
					"    css_1row.addressline1,\n",
					"    css_1row.addressline2,\n",
					"    css_1row.town,\n",
					"    css_1row.county,\n",
					"    css_1row.postcode,\n",
					"    css_1row.country\n",
					"  FROM add_aad a\n",
					"  LEFT JOIN ic_1row  ON a.caseuniqueid = ic_1row.appealrefnumber\n",
					"  LEFT JOIN sce_1row ON a.caseuniqueid = sce_1row.appealrefnumber\n",
					"  LEFT JOIN css_1row ON a.casenodeid   = css_1row.casenodeid\n",
					")\n",
					"\n",
					"SELECT\n",
					"  a.caseuniqueid                       AS caseReference,\n",
					"  a.casenodeid                         AS caseId,\n",
					"\n",
					"  a.abbreviation                       AS caseType,\n",
					"  a.caseStatus,\n",
					"  a.applicationReference,\n",
					"  a.typeOfPlanningApplication,\n",
					"  a.applicationDate,\n",
					"  a.applicationDecisionDate,\n",
					"  a.caseDecisionOutcome,\n",
					"  a.jurisdiction,\n",
					"  a.redeterminedIndicator,\n",
					"  a.lpaCode,\n",
					"  a.linkedCaseStatus,\n",
					"  a.leadCaseReference,\n",
					"\n",
					"  a.town                               AS siteAddressTown,\n",
					"  a.postcode                           AS siteAddressPostcode,\n",
					"  a.addressline2                       AS siteAddressLine2,\n",
					"  a.addressline1                       AS siteAddressLine1,\n",
					"  a.county                             AS siteAddressCounty,\n",
					"\n",
					"  a.isGreenBelt,\n",
					"  a.inConservationArea,\n",
					"  a.sitegridreferencenorthing          AS siteGridReferenceNorthing,\n",
					"  a.sitegridreferenceeasting           AS siteGridReferenceEasting,\n",
					"  a.isthesitewithinanaonb              AS isAonbNationalLandscape,\n",
					"\n",
					"  a.caseValidationOutcome,\n",
					"  a.caseValidationDate,\n",
					"  a.dateCostsReportDespatched,\n",
					"\n",
					"  a.questionnairereceived              AS lpaQuestionnaireSubmittedDate,\n",
					"  a.questionnairedue                   AS lpaQuestionnaireDueDate,\n",
					"  a.originalcasedecisiondate           AS originalCaseDecisionDate,\n",
					"  a.daterecovered                      AS dateRecovered,\n",
					"  a.datenotrecoveredorderecovered      AS dateNotRecoveredOrDerecovered,\n",
					"  a.appealwithdrawndate                AS caseWithdrawnDate,\n",
					"  a.startdate                          AS caseStartedDate,\n",
					"  a.casedecisiondate                   AS caseDecisionOutcomeDate,\n",
					"  a.receiptdate                        AS caseCreatedDate,\n",
					"  a.casedecisiondate                   AS caseCompletedDate,\n",
					"\n",
					"  (a.areaofsiteinhectares*10000.0)     AS siteAreaSquareMetres,\n",
					"  a.floorspaceinsquaremetres           AS floorSpaceSquareMetres,\n",
					"  a.originalDevelopmentDescription,\n",
					"  a.importantinformation,\n",
					"\n",
					"  a.procedurelpa                       AS lpaProcedurePreference,\n",
					"  a.caseProcedure,\n",
					"  a.inspectorId,\n",
					"\n",
					"  a.allocationLevel,\n",
					"  a.allocationBand,\n",
					"\n",
					"  a.casespecialism                     AS caseSpecialisms,\n",
					"  a.modifydate                         AS caseUpdatedDate\n",
					"\n",
					"FROM add_proc_inspector_geo a\n",
					"\"\"\"\n",
					"final_df = spark.sql(sql_text).drop(\"_ignore_old_caseStatus\", \"level_code\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Write Standardised HAS table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        logInfo(f\"Writing to {table_name}\")\n",
					"        insert_count = final_df.count()\n",
					"\n",
					"        # Create/overwrite standardised HAS table\n",
					"        final_df.write.mode(\"overwrite\").saveAsTable(table_name)\n",
					"        logInfo(f\"Written to {table_name}\")\n",
					"\n",
					"        end_exec_time = datetime.now()\n",
					"\n",
					"    except Exception as e:\n",
					"        error_message = logError(f\"Error writing data to the standardised table:\\n{e}\")\n",
					"        end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Telemetry & Exit"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"stage = \"Success\" if not error_message else \"Failed\"\n",
					"status_message = (\n",
					"    f\"Successfully loaded data into {table_name} table\"\n",
					"    if not error_message\n",
					"    else f\"Failed to load data into {table_name} table\"\n",
					")\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					"\n",
					"log_telemetry_and_exit(\n",
					"    stage,\n",
					"    start_exec_time,\n",
					"    end_exec_time,\n",
					"    error_message,\n",
					"    table_name,\n",
					"    insert_count,\n",
					"    update_count,\n",
					"    delete_count,\n",
					"    PipelineName,\n",
					"    PipelineRunID,\n",
					"    PipelineTriggerID,\n",
					"    PipelineTriggerName,\n",
					"    PipelineTriggerType,\n",
					"    PipelineTriggeredbyPipelineName,\n",
					"    PipelineTriggeredbyPipelineRunID,\n",
					"    activity_type,\n",
					"    duration_seconds,\n",
					"    status_message,\n",
					"    status_code\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}