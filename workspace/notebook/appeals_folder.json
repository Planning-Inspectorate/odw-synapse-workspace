{
	"name": "appeals_folder",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/DocumentTree"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fff5590a-b5d8-43a8-b8d3-962cea49f7d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import asyncio\n",
					"import nest_asyncio\n",
					"import tracemalloc\n",
					"import sys\n",
					"tracemalloc.start()\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"from pyspark.sql.functions import col, lit, input_file_name, current_timestamp, sha2, concat,max as spark_max\n",
					"from pyspark.sql.types import StringType, DateType, TimestampType, IntegerType, FloatType, StructType, StructField\n",
					"from delta import DeltaTable\n",
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Initialize Application Insight Logging functions\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Define variables\n",
					"target_table = 'appeals_folder'\n",
					"\n",
					"# Initialize tracking variables\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create Table if doesn't exist"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        logInfo(\"Starting appeals_folder processing\")\n",
					"\n",
					"        db_name = \"odw_harmonised_db\"\n",
					"        table_name = \"appeals_folder\"\n",
					"\n",
					"        def test_table_exists(db: str, table: str) -> bool:\n",
					"            spark.sql(f\"USE {db}\")\n",
					"            tables_df = spark.sql(\"SHOW TABLES\")\n",
					"            return table in [row[\"tableName\"] for row in tables_df.collect()]\n",
					"\n",
					"        if test_table_exists(db_name, table_name):\n",
					"            logInfo(f\"Table {db_name}.{table_name} exists in harmonised, updating the harmonised layer\")\n",
					"        else:\n",
					"            logInfo(f\"Table {db_name}.{table_name} does not exist, creating table first\")\n",
					"            mssparkutils.notebook.run(\"/py_odw_harmonised_table_creation\", 300, {\"specific_table\": table_name})\n",
					"            logInfo(f\"Table {db_name}.{table_name} created successfully\")\n",
					"\n",
					"    except Exception as e:\n",
					"        error_message = f\" Error in table existence check: {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View appeals_folder is created"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        spark.sql(\"\"\"\n",
					"            CREATE OR REPLACE TEMPORARY VIEW appeals_folder_new AS\n",
					"            SELECT DISTINCT\n",
					"                CASE\n",
					"                    WHEN T1.id IS NULL THEN T3.HorizonAppealFolderId\n",
					"                    ELSE NULL\n",
					"                END AS HorizonAppealFolderId,\n",
					"                T1.id AS ID,\n",
					"                T1.casereference AS CaseReference,\n",
					"                T1.displaynameenglish AS DisplayNameEnglish,\n",
					"                T1.displaynamewelsh AS DisplayNameWelsh,\n",
					"                T1.parentfolderid AS ParentFolderID,\n",
					"                T1.casenodeid AS CaseNodeId,\n",
					"                T1.casestage AS CaseStage,\n",
					"                T2.SourceSystemID AS SourceSystemID,\n",
					"                to_timestamp(T1.expected_from) AS IngestionDate,\n",
					"                NULL AS ValidTo,\n",
					"                md5(concat(\n",
					"                    IFNULL(T1.id,'.'),\n",
					"                    IFNULL(T1.casereference,'.'),\n",
					"                    IFNULL(T1.displaynameenglish,'.'),\n",
					"                    IFNULL(T1.displaynamewelsh,'.'),\n",
					"                    IFNULL(T1.parentfolderid,'.'),\n",
					"                    IFNULL(T1.casenodeid,'.'),\n",
					"                    IFNULL(T1.casestage,'.')\n",
					"                )) AS RowID,\n",
					"                'Y' AS IsActive,\n",
					"                T3.IsActive AS HistoricIsActive\n",
					"            FROM odw_standardised_db.horizon_appeals_folder T1\n",
					"            LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \n",
					"                ON 'DocumentTree' = T2.Description AND T2.IsActive = 'Y'\n",
					"            FULL JOIN odw_harmonised_db.appeals_folder T3 \n",
					"                ON T1.id = T3.ID AND T3.IsActive = 'Y'\n",
					"            WHERE (\n",
					"                CASE\n",
					"                    WHEN T1.casereference = T3.CaseReference AND md5(concat(\n",
					"                        IFNULL(T1.id,'.'),\n",
					"                        IFNULL(T1.casereference,'.'),\n",
					"                        IFNULL(T1.displaynameenglish,'.'),\n",
					"                        IFNULL(T1.displaynamewelsh,'.'),\n",
					"                        IFNULL(T1.parentfolderid,'.'),\n",
					"                        IFNULL(T1.casenodeid,'.'),\n",
					"                        IFNULL(T1.casestage,'.')\n",
					"                    )) <> T3.RowID THEN 'Y'\n",
					"                    WHEN T3.ID IS NULL THEN 'Y'\n",
					"                    ELSE 'N'\n",
					"                END = 'Y'\n",
					"            )\n",
					"            AND T1.id IS NOT NULL\n",
					"            AND NOT (T1.id = '29309932' AND T1.casestage = 'Initial Documents')\n",
					"            AND T1.expected_from = (\n",
					"                SELECT MAX(expected_from) \n",
					"                FROM odw_standardised_db.horizon_appeals_folder\n",
					"            );\n",
					"        \"\"\")\n",
					"        print(\"Temporary view 'appeals_folder_new' created successfully.\")\n",
					"    except Exception as e:\n",
					"        error_message = f\" Error creating temporary view 'appeals_folder_new': {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View appeals_folder_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        spark.sql(\"\"\"\n",
					"            CREATE OR REPLACE TEMPORARY VIEW appeals_folder_changed_rows AS\n",
					"            SELECT \n",
					"                HorizonAppealFolderId,\n",
					"                ID,\n",
					"                CaseReference,\n",
					"                DisplayNameEnglish,\n",
					"                DisplayNameWelsh,\n",
					"                ParentFolderID,\n",
					"                CaseNodeId,\n",
					"                CaseStage,\n",
					"                SourceSystemID,\n",
					"                IngestionDate,\n",
					"                ValidTo,\n",
					"                RowID,\n",
					"                IsActive\n",
					"            FROM appeals_folder_new \n",
					"            WHERE HistoricIsActive = 'Y' OR HistoricIsActive IS NULL\n",
					"\n",
					"            UNION ALL\n",
					"\n",
					"            SELECT\n",
					"                HorizonAppealFolderId,\n",
					"                ID,\n",
					"                CaseReference,\n",
					"                DisplayNameEnglish,\n",
					"                DisplayNameWelsh,\n",
					"                ParentFolderID,\n",
					"                CaseNodeId,\n",
					"                CaseStage,\n",
					"                SourceSystemID,\n",
					"                IngestionDate,\n",
					"                ValidTo,\n",
					"                RowID,\n",
					"                IsActive\n",
					"            FROM odw_harmonised_db.appeals_folder\n",
					"            WHERE ID IN (\n",
					"                SELECT ID \n",
					"                FROM appeals_folder_new \n",
					"                WHERE HorizonAppealFolderId IS NULL\n",
					"            ) AND IsActive = 'Y';\n",
					"        \"\"\")\n",
					"        print(\" Temporary view 'appeals_folder_changed_rows' created successfully.\")\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error creating temporary view 'appeals_folder_changed_rows': {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        # Create Loading_month view\n",
					"        spark.sql(\"\"\"\n",
					"            CREATE OR REPLACE TEMPORARY VIEW Loading_month AS\n",
					"            SELECT DISTINCT\n",
					"                IngestionDate AS IngestionDate,\n",
					"                to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"                'Y' AS IsActive\n",
					"            FROM appeals_folder_new;\n",
					"        \"\"\")\n",
					"\n",
					"        # Create appeals_folder_changed_rows_final view\n",
					"        spark.sql(\"\"\"\n",
					"            CREATE OR REPLACE TEMPORARY VIEW appeals_folder_changed_rows_final AS\n",
					"            SELECT \n",
					"                HorizonAppealFolderId,\n",
					"                ID,\n",
					"                CaseReference,\n",
					"                DisplayNameEnglish,\n",
					"                DisplayNameWelsh,\n",
					"                ParentFolderID,\n",
					"                CaseNodeId,\n",
					"                CaseStage,\n",
					"                T1.SourceSystemID,\n",
					"                T1.IngestionDate,\n",
					"                T1.ValidTo,\n",
					"                T1.RowID,\n",
					"                T1.IsActive,\n",
					"                T2.ClosingDate\n",
					"            FROM appeals_folder_changed_rows T1\n",
					"            FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive;\n",
					"        \"\"\")\n",
					"\n",
					"        print(\" Temporary views 'Loading_month' and 'appeals_folder_changed_rows_final' created successfully.\")\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error creating temporary views: {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View appeals_folder_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.appeals_folder is updated"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        update_count = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) AS update_count\n",
					"            FROM odw_harmonised_db.appeals_folder AS Target\n",
					"            JOIN appeals_folder_changed_rows_final AS Source\n",
					"                ON Source.HorizonAppealFolderId = Target.HorizonAppealFolderId\n",
					"            WHERE Target.IsActive = 'Y'\n",
					"        \"\"\").collect()[0][\"update_count\"]\n",
					"        print(f\"Update count: {update_count}\")\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error calculating update_count: {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					"\n",
					"    try:\n",
					"        insert_count = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) AS insert_count\n",
					"            FROM appeals_folder_changed_rows_final AS Source\n",
					"            LEFT JOIN odw_harmonised_db.appeals_folder AS Target\n",
					"                ON Source.HorizonAppealFolderId = Target.HorizonAppealFolderId AND Target.IsActive = 'Y'\n",
					"            WHERE Target.HorizonAppealFolderId IS NULL\n",
					"        \"\"\").collect()[0][\"insert_count\"]\n",
					"        print(f\"Insert count: {insert_count}\")\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error calculating insert_count: {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        spark.sql(\"\"\"\n",
					"            MERGE INTO odw_harmonised_db.appeals_folder AS Target\n",
					"            USING appeals_folder_changed_rows_final AS Source\n",
					"            ON Source.HorizonAppealFolderId = Target.HorizonAppealFolderId AND Target.IsActive = 'Y'\n",
					"\n",
					"            WHEN MATCHED THEN \n",
					"                UPDATE SET\n",
					"                    Target.ValidTo = to_timestamp(ClosingDate),\n",
					"                    Target.IsActive = 'N'\n",
					"\n",
					"            WHEN NOT MATCHED THEN \n",
					"                INSERT (\n",
					"                    HorizonAppealFolderId,\n",
					"                    ID,\n",
					"                    CaseReference,\n",
					"                    DisplayNameEnglish,\n",
					"                    DisplayNameWelsh,\n",
					"                    ParentFolderID,\n",
					"                    CaseNodeId,\n",
					"                    CaseStage,\n",
					"                    SourceSystemID,\n",
					"                    IngestionDate,\n",
					"                    ValidTo,\n",
					"                    RowID,\n",
					"                    IsActive\n",
					"                )\n",
					"                VALUES (\n",
					"                    Source.HorizonAppealFolderId,\n",
					"                    Source.ID,\n",
					"                    Source.CaseReference,\n",
					"                    Source.DisplayNameEnglish,\n",
					"                    Source.DisplayNameWelsh,\n",
					"                    Source.ParentFolderID,\n",
					"                    Source.CaseNodeId,\n",
					"                    Source.CaseStage,\n",
					"                    Source.SourceSystemID,\n",
					"                    Source.IngestionDate,\n",
					"                    Source.ValidTo,\n",
					"                    Source.RowID,\n",
					"                    Source.IsActive\n",
					"                );\n",
					"        \"\"\")\n",
					"        print(\" MERGE operation on 'appeals_folder' completed successfully.\")\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error during MERGE operation on 'appeals_folder': {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.appeals_folder is updated"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        spark.sql(\"\"\"\n",
					"            INSERT OVERWRITE odw_harmonised_db.appeals_folder\n",
					"            SELECT \n",
					"                ROW_NUMBER() OVER (ORDER BY CaseReference NULLS LAST) AS HorizonAppealFolderId,\n",
					"                ID,\n",
					"                CaseReference,\n",
					"                DisplayNameEnglish,\n",
					"                DisplayNameWelsh,\n",
					"                ParentFolderID,\n",
					"                CaseNodeId,\n",
					"                CaseStage,\n",
					"                SourceSystemID,\n",
					"                IngestionDate,\n",
					"                ValidTo,\n",
					"                RowID,\n",
					"                IsActive\n",
					"            FROM odw_harmonised_db.appeals_folder;\n",
					"        \"\"\")\n",
					"        print(\" INSERT OVERWRITE on 'appeals_folder' completed successfully.\")\n",
					"    except Exception as e:\n",
					"        error_message = f\" Error during INSERT OVERWRITE on 'appeals_folder': {str(e)}\"\n",
					"        logError(error_message)\n",
					"        raise\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"stage = \"Success\" if not error_message else \"Failed\"\n",
					"status_message = (\n",
					"    f\"Successfully loaded data into {target_table} table\"\n",
					"    if not error_message\n",
					"    else f\"Failed to load data from {target_table} table\"\n",
					")\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					" \n",
					"log_telemetry_and_exit(\n",
					"    stage,\n",
					"    start_exec_time,\n",
					"    end_exec_time,\n",
					"    error_message,\n",
					"    target_table,\n",
					"    insert_count,\n",
					"    update_count,\n",
					"    delete_count,\n",
					"    PipelineName,\n",
					"    PipelineRunID,\n",
					"    PipelineTriggerID,\n",
					"    PipelineTriggerName,\n",
					"    PipelineTriggerType,\n",
					"    PipelineTriggeredbyPipelineName,\n",
					"    PipelineTriggeredbyPipelineRunID,\n",
					"    activity_type,\n",
					"    duration_seconds,\n",
					"    status_message,\n",
					"    status_code\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}