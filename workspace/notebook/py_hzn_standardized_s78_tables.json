{
	"name": "py_hzn_standardized_s78_tables",
	"properties": {
		"folder": {
			"name": "odw-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ebfb27bb-6fc7-4f5d-a554-fede63608b13"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest horizon data into a single delta table,odw_standardised_db.horizon_appeal_s78_final.\r\n",
					"\r\n",
					"**Description**  \r\n",
					"The functionality of this notebook is to ingest data into odw_standardised_db.horizon_appeal_s78_final delta table reading from multiple odw_standardised_db delta table sources.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\r\n",
					"from pyspark.sql import Row\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_cases_s78 = \"odw_standardised_db.horizoncases_s78\"\r\n",
					"table_name = \"odw_standardised_db.horizon_appeal_s78_final\"\r\n",
					"primary_key = 'caseReference'\r\n",
					"incremental_key = 'AppealS78ID'\r\n",
					"\r\n",
					"# Initialise variables for Logging and Tracking\r\n",
					"start_exec_time = str(datetime.now())\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# This cell is generated from runtime parameters. Learn more: https://go.microsoft.com/fwlink/?linkid=2161015\r\n",
					"PipelineName = \"pln_horizon_to_odw\"\r\n",
					"PipelineRunID = \"ae4d7397-72e7-4147-9152-e8711c6d6dab\"\r\n",
					"PipelineTriggerID = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerName = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerType = \"PipelineActivity\"\r\n",
					"PipelineTriggeredbyPipelineName = \"pln_all_horizon_data\"\r\n",
					"PipelineTriggeredbyPipelineRunID = \"7cd26982-eaab-4646-b3fd-afd12b4bee73\"\r\n",
					"instrumentation_key='a1609846-e819-4880-976a-de745a22203f'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_spark_df(table_name: str) -> DataFrame:\r\n",
					"    df = spark.table(table_name)\r\n",
					"    ## To get the most updated record for expected from\r\n",
					"    max_date = df.agg(F.max(\"expected_from\")).collect()[0][0]\r\n",
					"    df_filtered = df.filter(F.col(\"expected_from\") == max_date)\r\n",
					"    return df_filtered\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    # Define all tables as Dataframes\r\n",
					"    hzn_cases_s78_df = get_spark_df(\"odw_standardised_db.horizoncases_s78\")\r\n",
					"    cases_specialism_df = get_spark_df(\"odw_standardised_db.cases_specialisms\")\r\n",
					"    vw_case_dates_df = get_spark_df(\"odw_standardised_db.vw_case_dates\")\r\n",
					"    CaseDocumentDatesDates_df = get_spark_df(\"odw_standardised_db.casedocumentdatesdates\")\r\n",
					"    CaseSiteStrings_df = get_spark_df(\"odw_standardised_db.casesitestrings\")\r\n",
					"    TypeOfProcedure_df = get_spark_df(\"odw_standardised_db.typeofprocedure\")\r\n",
					"    Horizon_TypeOfReasonForCase_df = get_spark_df(\"odw_standardised_db.horizon_typeofreasonforcase\")\r\n",
					"    vw_AddAdditionalData_df = get_spark_df(\"odw_standardised_db.vw_addadditionaldata\")\r\n",
					"    vw_AdditionalFields_df = get_spark_df(\"odw_standardised_db.vw_additionalfields\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    \r\n",
					"    error_message = logError(f\"Error in data frame creation :\\n{e}\")\r\n",
					"    end_exec_time = str(datetime.now()) "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Join all tables accordingly from the Sql QUERY PINS HAVE PROVIDED US.\r\n",
					"final_df = hzn_cases_s78_df\r\n",
					"final_df = final_df.join(cases_specialism_df, hzn_cases_s78_df.caseuniqueid == cases_specialism_df.casereference, 'left').select( final_df[\"*\"], cases_specialism_df.casespecialism)\r\n",
					"final_df = final_df.join(vw_case_dates_df, hzn_cases_s78_df.casenodeid == vw_case_dates_df.casenodeid, 'left').select( final_df[\"*\"], vw_case_dates_df.receiptdate, \r\n",
					"vw_case_dates_df.appealdocscomplete, vw_case_dates_df.startdate, vw_case_dates_df.appealwithdrawndate, vw_case_dates_df.casedecisiondate, vw_case_dates_df.datenotrecoveredorderecovered, vw_case_dates_df.daterecovered, vw_case_dates_df.originalcasedecisiondate )\r\n",
					"final_df = final_df.join(CaseDocumentDatesDates_df, hzn_cases_s78_df.casenodeid == CaseDocumentDatesDates_df.casenodeid, 'left').select( final_df[\"*\"], CaseDocumentDatesDates_df.questionnairedue, CaseDocumentDatesDates_df.questionnairereceived, CaseDocumentDatesDates_df.interestedpartyrepsduedate, CaseDocumentDatesDates_df.proofsdue )\r\n",
					"final_df =  final_df.join(CaseSiteStrings_df, hzn_cases_s78_df.casenodeid == CaseSiteStrings_df.casenodeid, 'left').select( final_df[\"*\"], CaseSiteStrings_df.siteviewablefromroad)\r\n",
					"final_df = final_df.join(vw_AddAdditionalData_df, hzn_cases_s78_df.caseuniqueid == vw_AddAdditionalData_df.appealrefnumber, 'left').select( final_df[\"*\"], vw_AddAdditionalData_df.floorspaceinsquaremetres, vw_AddAdditionalData_df.costsappliedforindicator, vw_AddAdditionalData_df.procedureappellant, vw_AddAdditionalData_df.isthesitewithinanaonb, vw_AddAdditionalData_df.procedurelpa, vw_AddAdditionalData_df.inspectorneedtoentersite, vw_AddAdditionalData_df.sitegridreferenceeasting, vw_AddAdditionalData_df.sitegridreferencenorthing , vw_AddAdditionalData_df.sitewithinsssi)\r\n",
					"final_df = final_df.join(vw_AdditionalFields_df, hzn_cases_s78_df.caseuniqueid == vw_AdditionalFields_df.appealrefnumber, 'left').select( final_df[\"*\"], vw_AdditionalFields_df.importantinformation)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"final_df = final_df.withColumn(\"preserveGrantLoan\", F.lit(None).cast(\"boolean\"))\r\n",
					"final_df = final_df.withColumn(\"consultHistoricEngland\", F.lit(None).cast(\"boolean\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"try:\r\n",
					"    logInfo(f\"Writing to {table_name}\")\r\n",
					"    insert_count = final_df.count()\r\n",
					"\r\n",
					"    # create a unified table for horizon_appeal_s78\r\n",
					"    final_df.write.mode(\"overwrite\").saveAsTable(table_name)\r\n",
					"    logInfo(f\"Written to {table_name}\")\r\n",
					"    \r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    \r\n",
					"except Exception as e:\r\n",
					"    error_message =logError(f\"Error appending data to the curated layer table :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())  "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import asyncio\r\n",
					"import nest_asyncio\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"nest_asyncio.apply()\r\n",
					"\r\n",
					"async def process_file(file):\r\n",
					"    # Ingest file, returning insert count, error message, and table name\r\n",
					"    insert_count, error_message, standardised_table_name, start_exec_time, end_exec_time = await ingest_horizon(date_folder=latest_folder, file=file)\r\n",
					"\r\n",
					"    # For testing error, uncomment below line or inject error_message dynamically\r\n",
					"    # error_message = \"Errors reported during Ingestion!!\"\r\n",
					"\r\n",
					"    DurationSeconds = (end_exec_time - start_exec_time).total_seconds()\r\n",
					"    ActivityType = mssparkutils.runtime.context['currentNotebookName'] + \" NoteBook\"\r\n",
					"    StatusMessage = (\r\n",
					"    f\"Successfully loaded data from {file} into {standardised_table_name} table\"\r\n",
					"    if not error_message\r\n",
					"    else f\"Failed to load data from {file} into {standardised_table_name} table\"\r\n",
					")\r\n",
					"    Stage = \"Success\" if not error_message else \"Failed\"\r\n",
					"\r\n",
					"    params = {\r\n",
					"        \"Stage\": Stage,\r\n",
					"        \"PipelineName\": PipelineName,\r\n",
					"        \"PipelineRunID\": PipelineRunID,\r\n",
					"        \"StartTime\": start_exec_time.isoformat(),\r\n",
					"        \"EndTime\": end_exec_time.isoformat(),\r\n",
					"        \"Inserts\": insert_count,\r\n",
					"        \"Updates\": update_count,\r\n",
					"        \"Deletes\": delete_count,\r\n",
					"        \"ErrorMessage\": error_message,\r\n",
					"        \"StatusMessage\": StatusMessage,\r\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\r\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\r\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\r\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\r\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\r\n",
					"        \"PipelineExecutionTimeInSec\": DurationSeconds,\r\n",
					"        \"ActivityType\": ActivityType,\r\n",
					"        \"DurationSeconds\": DurationSeconds,\r\n",
					"        \"StatusCode\": \"200\" if Stage == \"Success\" else \"500\",\r\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\r\n",
					"    }\r\n",
					"\r\n",
					"    # Send telemetry in a separate thread\r\n",
					"    await asyncio.to_thread(send_telemetry_to_app_insights, params, instrumentation_key)\r\n",
					"\r\n",
					"    # If error found, raise exception to stop overall processing and quit notebook\r\n",
					"    if error_message:\r\n",
					"        print(f\"Notebook failed for file {file}: {error_message}\")\r\n",
					"        raise RuntimeError(f\"Notebook failed due to error in file {file}: {error_message}\")\r\n",
					"\r\n",
					"async def load_horizon_async():\r\n",
					"    # Process files sequentially to stop on first error,\r\n",
					"    # or use gather with return_exceptions=False to stop on exceptions\r\n",
					"    for file in horizon_files:\r\n",
					"        await process_file(file)\r\n",
					"\r\n",
					"# Run and handle exception to quit notebook cleanly\r\n",
					"try:\r\n",
					"    loop = asyncio.get_event_loop()\r\n",
					"    loop.run_until_complete(load_horizon_async())\r\n",
					"except RuntimeError as e:\r\n",
					"    print(str(e))\r\n",
					"    import sys\r\n",
					"    sys.exit(1)  # Quits the notebook with error code 1"
				],
				"execution_count": null
			}
		]
	}
}