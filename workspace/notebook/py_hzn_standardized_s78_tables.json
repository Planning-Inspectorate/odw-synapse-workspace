{
	"name": "py_hzn_standardized_s78_tables",
	"properties": {
		"folder": {
			"name": "odw-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "765079f5-3f51-4340-8409-7a4890a1bbe5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest horizon data into a single delta table,odw_standardised_db.horizon_appeal_s78_final.\r\n",
					"\r\n",
					"**Description**  \r\n",
					"The functionality of this notebook is to ingest data into odw_standardised_db.horizon_appeal_s78_final delta table reading from multiple odw_standardised_db delta table sources.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from datetime import datetime\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_name = \"odw_standardised_db.horizon_appeal_s78\"\r\n",
					"primary_key = 'caseReference'\r\n",
					"incremental_key = 'AppealS78ID'\r\n",
					"\r\n",
					"# Initialise variables for Logging and Tracking\r\n",
					"start_exec_time = datetime.now()\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0\r\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_spark_df(table_name: str) -> DataFrame:\r\n",
					"    df = spark.table(table_name)\r\n",
					"    max_date = df.agg(F.max(\"expected_from\")).collect()[0][0]\r\n",
					"    return df.filter(F.col(\"expected_from\") == max_date) if max_date is not None else df.limit(0)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    # Define all tables as Dataframes\r\n",
					"    hzn_cases_s78_df = get_spark_df(\"odw_standardised_db.horizoncases_s78\")\r\n",
					"    cases_specialism_df = get_spark_df(\"odw_standardised_db.cases_specialisms\")\r\n",
					"    vw_case_dates_df = get_spark_df(\"odw_standardised_db.vw_case_dates\")\r\n",
					"    CaseDocumentDatesDates_df = get_spark_df(\"odw_standardised_db.casedocumentdatesdates\")\r\n",
					"    CaseSiteStrings_df = get_spark_df(\"odw_standardised_db.casesitestrings\")\r\n",
					"    TypeOfProcedure_df = get_spark_df(\"odw_standardised_db.typeofprocedure\")\r\n",
					"    vw_AddAdditionalData_df = get_spark_df(\"odw_standardised_db.vw_addadditionaldata\")\r\n",
					"    vw_AdditionalFields_df = get_spark_df(\"odw_standardised_db.vw_additionalfields\")\r\n",
					"\r\n",
					"    # New columns (red ones) from the spreadsheet\r\n",
					"    Horizon_vw_curr_TypeOfLevel_df        = get_spark_df(\"odw_standardised_db.TypeOfLevel\")\r\n",
					"    Horizon_vw_BIS_SpecialistCaseDates_df = get_spark_df(\"odw_standardised_db.horizon_specialist_case_dates\")\r\n",
					"    Horizon_vw_BIS_PlanningAppStrings_df  = get_spark_df(\"odw_standardised_db.PlanningAppStrings\")\r\n",
					"    Horizon_vw_BIS_PlanningAppDates_df    = get_spark_df(\"odw_standardised_db.PlanningAppDates\")\r\n",
					"    Horizon_vw_BIS_LeadCase_df            = get_spark_df(\"odw_standardised_db.BIS_LeadCase\")\r\n",
					"    Horizon_vw_BIS_CaseStrings_df         = get_spark_df(\"odw_standardised_db.CaseStrings\")\r\n",
					"    Horizon_vw_BIS_CaseInfo_df            = get_spark_df(\"odw_standardised_db.horizon_case_info\")\r\n",
					"    Horizon_vw_BIS_CaseDates_df           = get_spark_df(\"odw_standardised_db.horizon_case_dates\")\r\n",
					"    Horizon_vw_BIS_AppealsAdditionalData_df = get_spark_df(\"odw_standardised_db.horizon_appeals_additional_data\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    \r\n",
					"    error_message = logError(f\"Error in data frame creation :\\n{e}\")\r\n",
					"    end_exec_time = datetime.now() "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# 1) Register temp views\r\n",
					"def register_views():\r\n",
					"    hzn_cases_s78_df.createOrReplaceTempView(\"h\")\r\n",
					"    cases_specialism_df.createOrReplaceTempView(\"cs\")\r\n",
					"    vw_case_dates_df.createOrReplaceTempView(\"cd\")\r\n",
					"    CaseDocumentDatesDates_df.createOrReplaceTempView(\"cdd\")\r\n",
					"    CaseSiteStrings_df.createOrReplaceTempView(\"css\")\r\n",
					"    vw_AddAdditionalData_df.createOrReplaceTempView(\"aad_old\")\r\n",
					"    vw_AdditionalFields_df.createOrReplaceTempView(\"af\")\r\n",
					"    TypeOfProcedure_df.createOrReplaceTempView(\"tp\")\r\n",
					"    Horizon_vw_curr_TypeOfLevel_df.createOrReplaceTempView(\"ctl\")\r\n",
					"    Horizon_vw_BIS_SpecialistCaseDates_df.createOrReplaceTempView(\"scd\")\r\n",
					"    Horizon_vw_BIS_PlanningAppStrings_df.createOrReplaceTempView(\"pas\")\r\n",
					"    Horizon_vw_BIS_PlanningAppDates_df.createOrReplaceTempView(\"pad\")\r\n",
					"    Horizon_vw_BIS_LeadCase_df.createOrReplaceTempView(\"lc\")\r\n",
					"    Horizon_vw_BIS_CaseStrings_df.createOrReplaceTempView(\"cs2\")\r\n",
					"    Horizon_vw_BIS_CaseInfo_df.createOrReplaceTempView(\"ci\")\r\n",
					"    Horizon_vw_BIS_CaseDates_df.createOrReplaceTempView(\"cdh\")\r\n",
					"    Horizon_vw_BIS_AppealsAdditionalData_df.createOrReplaceTempView(\"aad\")\r\n",
					"\r\n",
					"register_views()\r\n",
					"\r\n",
					"# 2) Keep old flow, add new fields, and dedup each red source to 1 row per key\r\n",
					"sql_text = \"\"\"\r\n",
					"WITH base AS (\r\n",
					"  SELECT\r\n",
					"    h.*,\r\n",
					"    cs.casespecialism,\r\n",
					"    cd.receiptdate,\r\n",
					"    cd.appealdocscomplete,\r\n",
					"    cd.startdate,\r\n",
					"    cd.appealwithdrawndate,\r\n",
					"    cd.casedecisiondate,\r\n",
					"    cd.datenotrecoveredorderecovered,\r\n",
					"    cd.daterecovered,\r\n",
					"    cd.originalcasedecisiondate,\r\n",
					"    cdd.questionnairedue,\r\n",
					"    cdd.questionnairereceived,\r\n",
					"    cdd.interestedpartyrepsduedate,\r\n",
					"    cdd.proofsdue,\r\n",
					"    css.siteviewablefromroad,\r\n",
					"    aad_old.floorspaceinsquaremetres,\r\n",
					"    aad_old.costsappliedforindicator,\r\n",
					"    aad_old.procedureappellant,\r\n",
					"    aad_old.isthesitewithinanaonb,\r\n",
					"    aad_old.procedurelpa,\r\n",
					"    aad_old.inspectorneedtoentersite,\r\n",
					"    aad_old.sitegridreferenceeasting,\r\n",
					"    aad_old.sitegridreferencenorthing,\r\n",
					"    aad_old.sitewithinsssi,\r\n",
					"    af.importantinformation,\r\n",
					"    aad_old.level AS level_code\r\n",
					"  FROM h\r\n",
					"  LEFT JOIN cs      ON h.caseuniqueid = cs.casereference\r\n",
					"  LEFT JOIN cd      ON h.casenodeid   = cd.casenodeid\r\n",
					"  LEFT JOIN cdd     ON h.casenodeid   = cdd.casenodeid\r\n",
					"  LEFT JOIN css     ON h.casenodeid   = css.casenodeid\r\n",
					"  LEFT JOIN aad_old ON h.caseuniqueid = aad_old.appealrefnumber\r\n",
					"  LEFT JOIN af      ON h.caseuniqueid = af.appealrefnumber\r\n",
					"),\r\n",
					"\r\n",
					"-- Dedup each Horizon (red) source one row per key using a deterministic ordering\r\n",
					"pas_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT p.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY p.casenodeid\r\n",
					"             ORDER BY p.expected_from DESC, p.modified_datetime DESC, p.ingested_datetime DESC, p.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM pas p\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"pad_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT p.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY p.casenodeid\r\n",
					"             ORDER BY p.expected_from DESC, p.modified_datetime DESC, p.ingested_datetime DESC, p.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM pad p\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"lc_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.casenodeid\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM lc x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"cs2_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.casenodeid\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM cs2 x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"ci_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.appealrefnumber\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM ci x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"cdh_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.appealrefnumber\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM cdh x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"scd_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.appealrefnumber\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM scd x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"aad_1row AS (\r\n",
					"  SELECT * FROM (\r\n",
					"    SELECT x.*,\r\n",
					"           ROW_NUMBER() OVER (\r\n",
					"             PARTITION BY x.appealrefnumber\r\n",
					"             ORDER BY x.expected_from DESC, x.modified_datetime DESC, x.ingested_datetime DESC, x.file_id DESC\r\n",
					"           ) rn\r\n",
					"    FROM aad x\r\n",
					"  ) WHERE rn = 1\r\n",
					"),\r\n",
					"\r\n",
					"add_typeoflevel AS (\r\n",
					"  SELECT b.*, ctl.name AS allocationLevel, ctl.band AS allocationBand\r\n",
					"  FROM base b\r\n",
					"  LEFT JOIN ctl ON b.level_code = ctl.name\r\n",
					"),\r\n",
					"\r\n",
					"add_planning AS (\r\n",
					"  SELECT\r\n",
					"    t.*,\r\n",
					"    pas.lpaapplicationreference  AS applicationReference,\r\n",
					"    pas.planningapplicationtype  AS typeOfPlanningApplication,\r\n",
					"    pad.dateofapplication        AS applicationDate,\r\n",
					"    pad.dateoflpadecision        AS applicationDecisionDate\r\n",
					"  FROM add_typeoflevel t\r\n",
					"  LEFT JOIN pas_1row pas ON t.casenodeid = pas.casenodeid\r\n",
					"  LEFT JOIN pad_1row pad ON t.casenodeid = pad.casenodeid\r\n",
					"),\r\n",
					"\r\n",
					"add_case_refs AS (\r\n",
					"  SELECT\r\n",
					"    p.*,\r\n",
					"    lc.leadcasenodeid      AS leadCaseReference,\r\n",
					"    cs2.processingstate    AS caseStatus,\r\n",
					"    cs2.lpacode            AS lpaCode,\r\n",
					"    cs2.linkedstatus       AS linkedCaseStatus,\r\n",
					"    cs2.decision           AS caseDecisionOutcome,\r\n",
					"    cs2.jurisdiction       AS jurisdiction,\r\n",
					"    cs2.redetermined       AS redeterminedIndicator,\r\n",
					"    cs2.developmenttype    AS developmentType,\r\n",
					"    cs2.proceduretype      AS procedureType,\r\n",
					"    ci.validity            AS caseValidationOutcome\r\n",
					"  FROM add_planning p\r\n",
					"  LEFT JOIN lc_1row  lc  ON p.casenodeid   = lc.casenodeid\r\n",
					"  LEFT JOIN cs2_1row cs2 ON p.casenodeid   = cs2.casenodeid\r\n",
					"  LEFT JOIN ci_1row  ci  ON p.caseuniqueid = ci.appealrefnumber\r\n",
					"),\r\n",
					"\r\n",
					"add_dates AS (\r\n",
					"  SELECT\r\n",
					"    c.*,\r\n",
					"    cdh.validitystatusdate        AS caseValidationDate,\r\n",
					"    scd.datecostsreportdespatched AS dateCostsReportDespatched\r\n",
					"  FROM add_case_refs c\r\n",
					"  LEFT JOIN cdh_1row cdh ON c.caseuniqueid = cdh.appealrefnumber\r\n",
					"  LEFT JOIN scd_1row scd ON c.caseuniqueid = scd.appealrefnumber\r\n",
					"),\r\n",
					"\r\n",
					"add_aad AS (\r\n",
					"  SELECT\r\n",
					"    d.*,\r\n",
					"    aad.developmentorallegation     AS originalDevelopmentDescription,\r\n",
					"    aad.appellantcommentssubmitted  AS appellantCommentsSubmittedDate,\r\n",
					"    aad.appellantstatementsubmitted AS appellantStatementSubmittedDate,\r\n",
					"    aad.lpacommentssubmitted        AS lpaCommentsSubmittedDate,\r\n",
					"    aad.lpaproofssubmitted          AS lpaProofsSubmittedDate,\r\n",
					"    aad.lpastatementsubmitted       AS lpaStatementSubmittedDate,\r\n",
					"    aad.sitenoticesent              AS siteNoticesSentDate,\r\n",
					"    aad.statementsdue               AS statementDueDate,\r\n",
					"    aad.numberofresidences          AS numberOfResidencesNetChange\r\n",
					"  FROM add_dates d\r\n",
					"  LEFT JOIN aad_1row aad ON d.caseuniqueid = aad.appealrefnumber\r\n",
					"),\r\n",
					"\r\n",
					"add_procedure AS (\r\n",
					"  SELECT a.*, tp.proccode AS caseProcedure\r\n",
					"  FROM add_aad a\r\n",
					"  LEFT JOIN tp ON a.procedureType = tp.name\r\n",
					")\r\n",
					"\r\n",
					"SELECT * FROM add_procedure\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"final_df = spark.sql(sql_text).drop(\"level_code\")\r\n",
					"\r\n",
					"print(\"final_df rows:\", final_df.count())\r\n",
					"display(final_df)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"final_df = final_df.withColumn(\"preserveGrantLoan\", F.lit(None).cast(\"boolean\"))\r\n",
					"final_df = final_df.withColumn(\"consultHistoricEngland\", F.lit(None).cast(\"boolean\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"try:\r\n",
					"    logInfo(f\"Writing to {table_name}\")\r\n",
					"    insert_count = final_df.count()\r\n",
					"\r\n",
					"    # create a unified table for horizon_appeal_s78\r\n",
					"    final_df.write.mode(\"overwrite\").saveAsTable(table_name)\r\n",
					"    logInfo(f\"Written to {table_name}\")\r\n",
					"    \r\n",
					"    end_exec_time = datetime.now()\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    error_message = logError(f\"Error appending data to the curated layer table:\\n{e}\")\r\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#####  Logging Execution Metadata to Azure Application Insights"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# This cell is generated from runtime parameters. Learn more: https://go.microsoft.com/fwlink/?linkid=2161015\r\n",
					"PipelineName = \"pln_horizon_to_odw_1872\"\r\n",
					"PipelineRunID = \"ae4d7397-72e7-4147-9152-e8711c6d6dab\"\r\n",
					"PipelineTriggerID = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerName = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerType = \"PipelineActivity\"\r\n",
					"PipelineTriggeredbyPipelineName = \"pln_all_horizon_data\"\r\n",
					"PipelineTriggeredbyPipelineRunID = \"7cd26982-eaab-4646-b3fd-afd12b4bee73\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    # Calculate execution duration\r\n",
					"    duration_seconds = (end_exec_time - start_exec_time).total_seconds()\r\n",
					"\r\n",
					"    # Define activity type\r\n",
					"    activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\r\n",
					"\r\n",
					"    # Determine status and message\r\n",
					"    stage = \"Success\" if not error_message else \"Failed\"\r\n",
					"    status_message = (\r\n",
					"        f\"Successfully loaded data into {table_name} table\"\r\n",
					"        if not error_message\r\n",
					"        else f\"Failed to load data from {table_name} table\"\r\n",
					"    )\r\n",
					"    status_code = \"200\" if stage == \"Success\" else \"500\"\r\n",
					"\r\n",
					"    # Prepare telemetry parameters\r\n",
					"    params = {\r\n",
					"        \"Stage\": stage,\r\n",
					"        \"PipelineName\": PipelineName,\r\n",
					"        \"PipelineRunID\": PipelineRunID,\r\n",
					"        \"StartTime\": start_exec_time.isoformat(),\r\n",
					"        \"EndTime\": end_exec_time.isoformat(),\r\n",
					"        \"Inserts\": insert_count,\r\n",
					"        \"Updates\": update_count,\r\n",
					"        \"Deletes\": delete_count,\r\n",
					"        \"ErrorMessage\": error_message,\r\n",
					"        \"StatusMessage\": status_message,\r\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\r\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\r\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\r\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\r\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\r\n",
					"        \"PipelineExecutionTimeInSec\": duration_seconds,\r\n",
					"        \"ActivityType\": activity_type,\r\n",
					"        \"DurationSeconds\": duration_seconds,\r\n",
					"        \"StatusCode\": status_code,\r\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\r\n",
					"    }\r\n",
					"\r\n",
					"    # Send telemetry asynchronously\r\n",
					"    send_telemetry_to_app_insights(params)\r\n",
					"\r\n",
					"    # Raise error if execution failed\r\n",
					"    if error_message:\r\n",
					"        print(f\"Notebook Failed for load {table_name} : {error_message}\")\r\n",
					"        raise RuntimeError(f\"Notebook Failed due to error in {table_name} Table: {error_message}\")\r\n",
					"\r\n",
					"except RuntimeError as e:\r\n",
					"    print(str(e))\r\n",
					"    import sys\r\n",
					"    sys.exit(1)"
				],
				"execution_count": null
			}
		]
	}
}