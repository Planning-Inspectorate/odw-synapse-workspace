{
	"name": "py_harmonised_create_groupresolver",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ee81b5be-b542-4276-9c39-649c047b2e8c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"db_name = \"odw_harmonised_db\"\n",
					"table_name = \"GroupResolver\"  "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(f\"CREATE DATABASE IF NOT EXISTS {db_name}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, TimestampType\n",
					"from pyspark.sql import functions as F\n",
					"\n",
					"schema = StructType([\n",
					"    StructField(\"caseReference\", StringType(), False),  \n",
					"    StructField(\"currentGroup\", StringType(), False),   \n",
					"    StructField(\"asOfTimestamp\", TimestampType(), False)\n",
					"])\n",
					"\n",
					"empty_df = spark.createDataFrame([], schema)\n",
					"\n",
					"spark.sql(f\"USE {db_name}\")\n",
					"if not spark._jsparkSession.catalog().tableExists(db_name, table_name):\n",
					"    (empty_df.write\n",
					"        .format(\"delta\")\n",
					"        .mode(\"overwrite\")\n",
					"        .saveAsTable(f\"{db_name}.{table_name}\"))\n",
					""
				],
				"execution_count": null
			}
		]
	}
}