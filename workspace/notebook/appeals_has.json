{
	"name": "appeals_has",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f22867da-f563-4522-85b2-101d616dfc7b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest service bus data  into single external table,  odw_curated_db.appeal_has.\n",
					"\n",
					"**Description**  \n",
					"The functionality of this notebook is to ingest data into odw_curated_db.appeal_has external table reading from odw_harmonised_db.sb_appeal_has delta table.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"appeal-has\"\n",
					"table_name: str = \"odw_curated_db.appeal_has\"\n",
					"\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    h = (\n",
					"        spark.table(\"odw_harmonised_db.appeal_has\")\n",
					"             .filter(F.col(\"IsActive\") == \"Y\")\n",
					"    )\n",
					"\n",
					"    curated_cols = (\n",
					"        \"caseId\",\n",
					"        \"caseReference\",\n",
					"        \"submissionId\",\n",
					"        \"caseStatus\",\n",
					"        \"caseType\",\n",
					"        \"caseProcedure\",\n",
					"        \"lpaCode\",\n",
					"        \"caseOfficerId\",\n",
					"        \"inspectorId\",\n",
					"        \"allocationLevel\",\n",
					"        \"allocationBand\",\n",
					"        \"caseSpecialisms\",\n",
					"        \"caseSubmittedDate\",\n",
					"        \"caseCreatedDate\",\n",
					"        \"caseUpdatedDate\",\n",
					"        \"caseValidDate\",\n",
					"        \"caseValidationDate\",\n",
					"        \"caseValidationOutcome\",\n",
					"        \"caseValidationInvalidDetails\",\n",
					"        \"caseValidationIncompleteDetails\",\n",
					"        \"caseExtensionDate\",\n",
					"        \"caseStartedDate\",\n",
					"        \"casePublishedDate\",\n",
					"        \"linkedCaseStatus\",\n",
					"        \"leadCaseReference\",\n",
					"        \"lpaQuestionnaireDueDate\",\n",
					"        \"lpaQuestionnaireSubmittedDate\",\n",
					"        \"lpaQuestionnaireCreatedDate\",\n",
					"        \"lpaQuestionnairePublishedDate\",\n",
					"        \"lpaQuestionnaireValidationOutcome\",\n",
					"        \"lpaQuestionnaireValidationOutcomeDate\",\n",
					"        \"lpaQuestionnaireValidationDetails\",\n",
					"        \"caseWithdrawnDate\",\n",
					"        \"caseTransferredDate\",\n",
					"        \"transferredCaseClosedDate\",\n",
					"        \"caseDecisionOutcomeDate\",\n",
					"        \"caseDecisionPublishedDate\",\n",
					"        \"caseDecisionOutcome\",\n",
					"        \"caseCompletedDate\",\n",
					"        \"enforcementNotice\",\n",
					"        \"applicationReference\",\n",
					"        \"applicationDate\",\n",
					"        \"applicationDecision\",\n",
					"        \"applicationDecisionDate\",\n",
					"        \"caseSubmissionDueDate\",\n",
					"        \"siteAddressLine1\",\n",
					"        \"siteAddressLine2\",\n",
					"        \"siteAddressTown\",\n",
					"        \"siteAddressCounty\",\n",
					"        \"siteAddressPostcode\",\n",
					"        \"siteAccessDetails\",\n",
					"        \"siteSafetyDetails\",\n",
					"        \"siteAreaSquareMetres\",\n",
					"        \"floorSpaceSquareMetres\",\n",
					"        \"isCorrectAppealType\",\n",
					"        \"isGreenBelt\",\n",
					"        \"inConservationArea\",\n",
					"        \"ownsAllLand\",\n",
					"        \"ownsSomeLand\",\n",
					"        \"knowsOtherOwners\",\n",
					"        \"knowsAllOwners\",\n",
					"        \"advertisedAppeal\",\n",
					"        \"notificationMethod\",\n",
					"        \"ownersInformed\",\n",
					"        \"originalDevelopmentDescription\",\n",
					"        \"changedDevelopmentDescription\",\n",
					"        \"newConditionDetails\",\n",
					"        \"nearbyCaseReferences\",\n",
					"        \"neighbouringSiteAddresses\",\n",
					"        \"reasonForNeighbourVisits\",\n",
					"        \"affectedListedBuildingNumbers\",\n",
					"        \"appellantCostsAppliedFor\",\n",
					"        \"lpaCostsAppliedFor\",\n",
					"        \"typeOfPlanningApplication\",\n",
					"        \"affectsScheduledMonument\",\n",
					"        \"hasProtectedSpecies\",\n",
					"        \"isAonbNationalLandscape\",\n",
					"        \"hasInfrastructureLevy\",\n",
					"        \"isInfrastructureLevyFormallyAdopted\",\n",
					"        \"infrastructureLevyAdoptedDate\",\n",
					"        \"infrastructureLevyExpectedDate\",\n",
					"        \"importantInformation\",\n",
					"        \"jurisdiction\",\n",
					"        \"redeterminedIndicator\",\n",
					"        \"dateCostsReportDespatched\",\n",
					"        \"dateNotRecoveredOrDerecovered\",\n",
					"        \"dateRecovered\",\n",
					"        \"originalCaseDecisionDate\",\n",
					"        \"siteGridReferenceEasting\",\n",
					"        \"siteGridReferenceNorthing\",\n",
					"        \"hasLandownersPermission\",\n",
					"        \"isSiteOnHighwayLand\",\n",
					"        \"isAdvertInPosition\",\n",
					"        \"isSiteInAreaOfSpecialControlAdverts\",\n",
					"        \"wasApplicationRefusedDueToHighwayOrTraffic\",\n",
					"        \"didAppellantSubmitCompletePhotosAndPlans\",\n",
					"        \"advertType\",\n",
					"        \"lpaProcedurePreferenceDetails\",\n",
					"        \"designatedSitesNames\",\n",
					"        \"lpaProcedurePreference\",\n",
					"        \"lpaProcedurePreferenceDuration\"\n",
					"    )\n",
					"\n",
					"    current_cols = set(h.columns)\n",
					"    missing = [c for c in curated_cols if c not in current_cols]\n",
					"    if missing:\n",
					"        print(\"Missing in Harmonised:\", missing)\n",
					"\n",
					"    select_exprs = []\n",
					"    for c in curated_cols:\n",
					"        if c in current_cols:\n",
					"            select_exprs.append(F.col(c))\n",
					"        else:\n",
					"            select_exprs.append(F.lit(None).cast(\"string\").alias(c))\n",
					"\n",
					"    df = h.select(*select_exprs)\n",
					"\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in SQL query for table odw_harmonised_db.appeal_has : {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if not error_message:\n",
					"    try:\n",
					"        insert_count = df.count()\n",
					"        print(insert_count)\n",
					"\n",
					"        (df.write\n",
					"           .mode(\"overwrite\")\n",
					"           .format(\"parquet\")\n",
					"           .option(\"overwriteSchema\",\"true\")\n",
					"           .saveAsTable(table_name))\n",
					"\n",
					"        print(f\"Written to {table_name}\")\n",
					"        end_exec_time = datetime.now()\n",
					"\n",
					"    except Exception as e:\n",
					"        error_message = f\"Error writing curated table {table_name} : {str(e)[:800]}\"\n",
					"        end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#####  Logging Execution Metadata to Azure Application Insights"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"stage = \"Success\" if not error_message else \"Failed\"\n",
					"status_message = (\n",
					"    f\"Successfully loaded data into {table_name} table\"\n",
					"    if not error_message\n",
					"    else f\"Failed to load data from {table_name} table\"\n",
					")\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					"\n",
					"log_telemetry_and_exit(\n",
					"    stage,\n",
					"    start_exec_time,\n",
					"    end_exec_time,\n",
					"    error_message,\n",
					"    table_name,\n",
					"    insert_count,\n",
					"    update_count,\n",
					"    delete_count,\n",
					"    PipelineName,\n",
					"    PipelineRunID,\n",
					"    PipelineTriggerID,\n",
					"    PipelineTriggerName,\n",
					"    PipelineTriggerType,\n",
					"    PipelineTriggeredbyPipelineName,\n",
					"    PipelineTriggeredbyPipelineRunID,\n",
					"    activity_type,\n",
					"    duration_seconds,\n",
					"    status_message,\n",
					"    status_code\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}