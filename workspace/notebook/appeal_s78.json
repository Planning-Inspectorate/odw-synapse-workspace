{
	"name": "appeal_s78",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "29673da3-0270-4253-982d-889c59e671a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Purpose  \r\n",
					"The purpose of this PySpark notebook is to build the **Curated table (`odw_curated_db.appeal_s78`)** from the **Harmonised FINAL dataset (`odw_harmonised_db.appeal_s78`)** by selecting only active (`IsActive = 'Y'`) records\r\n",
					"\r\n",
					"#### Description  \r\n",
					"This notebook extracts the latest valid records from the Harmonised layer and writes them into the Curated layer as a managed Parquet table.  \r\n",
					"No transformations or business logic are applied â€” it performs a **direct 1:1 projection** of the Harmonised active slice into Curated  \r\n",
					"\r\n",
					"The process includes:  \r\n",
					"- Selecting only relevant columns matching the Curated schema  \r\n",
					"- Writing the final dataset in Parquet format to `odw_curated_db.appeal_s78`  \r\n",
					"- Logging operational metrics (row counts, duration, errors) to **Azure Application Insights** at notebook exit for full audit traceability  \r\n",
					"\r\n",
					"#### Spark Cluster Configuration  \r\n",
					"- **Apache Spark Version:** 3.4  \r\n",
					"- **Python Version:** 3.10  \r\n",
					"- **Delta Lake Version:** 2.4  \r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\r\n",
					"entity_name: str = \"appeal-s78\"\r\n",
					"table_name: str = \"odw_curated_db.appeal_s78\"\r\n",
					"\r\n",
					"start_exec_time = datetime.now()\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0\r\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### <u>**Note:**</u>\r\n",
					"- This notebook now sources data directly from **`odw_harmonised_db.appeal_s78`** rather than `sb_appeal_s78`  \r\n",
					"- The Harmonised table already consolidates both Service Bus and Horizon data, so no joins across sources are required\r\n",
					"- Only records where **`IsActive = 'Y'`** are selected to represent the latest valid snapshot\r\n",
					"- The Curated layer is rebuilt as a clean, one-to-one projection of the Harmonised active slice no transformations applied.  \r\n",
					"- Please ensure that the curated column list below remains aligned with the final approved schema\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\r\n",
					"    h = (\r\n",
					"        spark.table(\"odw_harmonised_db.appeal_s78\")\r\n",
					"             .filter(F.col(\"IsActive\") == \"Y\")\r\n",
					"    )\r\n",
					"\r\n",
					"    curated_cols = (\r\n",
					"        \"caseReference\",\r\n",
					"        \"caseId\",\r\n",
					"        \"submissionId\",\r\n",
					"        \"caseStatus\",\r\n",
					"        \"caseType\",\r\n",
					"        \"caseProcedure\",\r\n",
					"        \"lpaCode\",\r\n",
					"        \"caseOfficerId\",\r\n",
					"        \"inspectorId\",\r\n",
					"        \"allocationLevel\",\r\n",
					"        \"allocationBand\",\r\n",
					"        \"caseSpecialisms\",\r\n",
					"        \"caseSubmittedDate\",\r\n",
					"        \"caseCreatedDate\",\r\n",
					"        \"caseUpdatedDate\",\r\n",
					"        \"caseValidDate\",\r\n",
					"        \"caseValidationDate\",\r\n",
					"        \"caseValidationOutcome\",\r\n",
					"        \"caseValidationInvalidDetails\",\r\n",
					"        \"caseValidationIncompleteDetails\",\r\n",
					"        \"caseExtensionDate\",\r\n",
					"        \"caseStartedDate\",\r\n",
					"        \"casePublishedDate\",\r\n",
					"        \"linkedCaseStatus\",\r\n",
					"        \"leadCaseReference\",\r\n",
					"        \"lpaQuestionnaireDueDate\",\r\n",
					"        \"lpaQuestionnaireSubmittedDate\",\r\n",
					"        \"lpaQuestionnaireCreatedDate\",\r\n",
					"        \"lpaQuestionnairePublishedDate\",\r\n",
					"        \"lpaQuestionnaireValidationOutcome\",\r\n",
					"        \"lpaQuestionnaireValidationOutcomeDate\",\r\n",
					"        \"lpaQuestionnaireValidationDetails\",\r\n",
					"        \"lpaStatement\",\r\n",
					"        \"caseWithdrawnDate\",\r\n",
					"        \"caseTransferredDate\",\r\n",
					"        \"transferredCaseClosedDate\",\r\n",
					"        \"caseDecisionOutcomeDate\",\r\n",
					"        \"caseDecisionPublishedDate\",\r\n",
					"        \"caseDecisionOutcome\",\r\n",
					"        \"caseCompletedDate\",\r\n",
					"        \"enforcementNotice\",\r\n",
					"        \"applicationReference\",\r\n",
					"        \"applicationDate\",\r\n",
					"        \"applicationDecision\",\r\n",
					"        \"applicationDecisionDate\",\r\n",
					"        \"caseSubmissionDueDate\",\r\n",
					"        \"siteAddressLine1\",\r\n",
					"        \"siteAddressLine2\",\r\n",
					"        \"siteAddressTown\",\r\n",
					"        \"siteAddressCounty\",\r\n",
					"        \"siteAddressPostcode\",\r\n",
					"        \"siteAccessDetails\",\r\n",
					"        \"siteSafetyDetails\",\r\n",
					"        \"siteAreaSquareMetres\",\r\n",
					"        \"floorSpaceSquareMetres\",\r\n",
					"        \"isCorrectAppealType\",\r\n",
					"        \"isGreenBelt\",\r\n",
					"        \"inConservationArea\",\r\n",
					"        \"ownsAllLand\",\r\n",
					"        \"ownsSomeLand\",\r\n",
					"        \"knowsOtherOwners\",\r\n",
					"        \"knowsAllOwners\",\r\n",
					"        \"advertisedAppeal\",\r\n",
					"        \"notificationMethod\",\r\n",
					"        \"ownersInformed\",\r\n",
					"        \"originalDevelopmentDescription\",\r\n",
					"        \"changedDevelopmentDescription\",\r\n",
					"        \"newConditionDetails\",\r\n",
					"        \"nearbyCaseReferences\",\r\n",
					"        \"neighbouringSiteAddresses\",\r\n",
					"        \"affectedListedBuildingNumbers\",\r\n",
					"        \"changedListedBuildingNumbers\",\r\n",
					"        \"appellantCostsAppliedFor\",\r\n",
					"        \"lpaCostsAppliedFor\",\r\n",
					"        \"agriculturalHolding\",\r\n",
					"        \"tenantAgriculturalHolding\",\r\n",
					"        \"otherTenantsAgriculturalHolding\",\r\n",
					"        \"informedTenantsAgriculturalHolding\",\r\n",
					"        \"appellantProcedurePreference\",\r\n",
					"        \"appellantProcedurePreferenceDetails\",\r\n",
					"        \"appellantProcedurePreferenceDuration\",\r\n",
					"        \"appellantProcedurePreferenceWitnessCount\",\r\n",
					"        \"statusPlanningObligation\",\r\n",
					"        \"affectsScheduledMonument\",\r\n",
					"        \"hasProtectedSpecies\",\r\n",
					"        \"isAonbNationalLandscape\",\r\n",
					"        \"designatedSitesNames\",\r\n",
					"        \"isGypsyOrTravellerSite\",\r\n",
					"        \"isPublicRightOfWay\",\r\n",
					"        \"eiaEnvironmentalImpactSchedule\",\r\n",
					"        \"eiaDevelopmentDescription\",\r\n",
					"        \"eiaSensitiveAreaDetails\",\r\n",
					"        \"eiaColumnTwoThreshold\",\r\n",
					"        \"eiaScreeningOpinion\",\r\n",
					"        \"eiaRequiresEnvironmentalStatement\",\r\n",
					"        \"eiaCompletedEnvironmentalStatement\",\r\n",
					"        \"hasStatutoryConsultees\",\r\n",
					"        \"consultedBodiesDetails\",\r\n",
					"        \"hasInfrastructureLevy\",\r\n",
					"        \"isInfrastructureLevyFormallyAdopted\",\r\n",
					"        \"infrastructureLevyAdoptedDate\",\r\n",
					"        \"infrastructureLevyExpectedDate\",\r\n",
					"        \"lpaProcedurePreference\",\r\n",
					"        \"lpaProcedurePreferenceDetails\",\r\n",
					"        \"lpaProcedurePreferenceDuration\",\r\n",
					"        \"caseworkReason\",\r\n",
					"        \"developmentType\",\r\n",
					"        \"importantInformation\",\r\n",
					"        \"jurisdiction\",\r\n",
					"        \"redeterminedIndicator\",\r\n",
					"        \"dateCostsReportDespatched\",\r\n",
					"        \"dateNotRecoveredOrDerecovered\",\r\n",
					"        \"dateRecovered\",\r\n",
					"        \"originalCaseDecisionDate\",\r\n",
					"        \"targetDate\",\r\n",
					"        \"appellantCommentsSubmittedDate\",\r\n",
					"        \"appellantStatementSubmittedDate\",\r\n",
					"        \"appellantProofsSubmittedDate\",\r\n",
					"        \"finalCommentsDueDate\",\r\n",
					"        \"interestedPartyRepsDueDate\",\r\n",
					"        \"lpaCommentsSubmittedDate\",\r\n",
					"        \"lpaProofsSubmittedDate\",\r\n",
					"        \"lpaStatementSubmittedDate\",\r\n",
					"        \"proofsOfEvidenceDueDate\",\r\n",
					"        \"siteNoticesSentDate\",\r\n",
					"        \"statementDueDate\",\r\n",
					"        \"reasonForNeighbourVisits\",\r\n",
					"        \"numberOfResidencesNetChange\",\r\n",
					"        \"siteGridReferenceEasting\",\r\n",
					"        \"siteGridReferenceNorthing\",\r\n",
					"        \"siteViewableFromRoad\",\r\n",
					"        \"siteWithinSSSI\",\r\n",
					"        \"typeOfPlanningApplication\",\r\n",
					"        \"preserveGrantLoan\",\r\n",
					"        \"consultHistoricEngland\",\r\n",
					"        \"planningObligationDueDate\",\r\n",
					"        \"statementOfCommonGroundDueDate\",\r\n",
					"    )\r\n",
					"\r\n",
					"    current_cols = set(h.columns)\r\n",
					"    missing = [c for c in curated_cols if c not in current_cols]\r\n",
					"    if missing:\r\n",
					"        print(\"Missing in Harmonised:\", missing)\r\n",
					"\r\n",
					"    select_exprs = []\r\n",
					"    for c in curated_cols:\r\n",
					"        if c in current_cols:\r\n",
					"            select_exprs.append(F.col(c))\r\n",
					"        else:\r\n",
					"            select_exprs.append(F.lit(None).cast(\"string\").alias(c))\r\n",
					"\r\n",
					"    df = h.select(*select_exprs)\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    error_message = f\"Error building curated DataFrame from harmonised appeal_s78 : {str(e)[:800]}\"\r\n",
					"    end_exec_time = datetime.now() "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"if not error_message:\r\n",
					"    try:\r\n",
					"        insert_count = df.count()\r\n",
					"        print(\"rows to write:\", insert_count)\r\n",
					"\r\n",
					"        (df.write\r\n",
					"           .mode(\"overwrite\")\r\n",
					"           .format(\"parquet\")\r\n",
					"           .option(\"overwriteSchema\",\"true\")\r\n",
					"           .saveAsTable(table_name))\r\n",
					"\r\n",
					"        print(f\"Written to {table_name}\")\r\n",
					"        end_exec_time = datetime.now()\r\n",
					"\r\n",
					"    except Exception as e:\r\n",
					"        error_message = f\"Error writing curated table {table_name} : {str(e)[:800]}\"\r\n",
					"        end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#####  Logging Execution Metadata to Azure Application Insights"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\r\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\r\n",
					"stage = \"Success\" if not error_message else \"Failed\"\r\n",
					"status_message = (\r\n",
					"    f\"Successfully loaded data into {table_name} table\"\r\n",
					"    if not error_message\r\n",
					"    else f\"Failed to load data from {table_name} table\"\r\n",
					")\r\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\r\n",
					"\r\n",
					"log_telemetry_and_exit(\r\n",
					"    stage,\r\n",
					"    start_exec_time,\r\n",
					"    end_exec_time,\r\n",
					"    error_message,\r\n",
					"    table_name,\r\n",
					"    insert_count,\r\n",
					"    update_count,\r\n",
					"    delete_count,\r\n",
					"    PipelineName,\r\n",
					"    PipelineRunID,\r\n",
					"    PipelineTriggerID,\r\n",
					"    PipelineTriggerName,\r\n",
					"    PipelineTriggerType,\r\n",
					"    PipelineTriggeredbyPipelineName,\r\n",
					"    PipelineTriggeredbyPipelineRunID,\r\n",
					"    activity_type,\r\n",
					"    duration_seconds,\r\n",
					"    status_message,\r\n",
					"    status_code\r\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}