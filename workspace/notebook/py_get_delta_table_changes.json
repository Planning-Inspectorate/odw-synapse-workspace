{
	"name": "py_get_delta_table_changes",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9f207e6b-b633-4094-8cb2-bd218096da92"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name=''\n",
					"table_name=''\n",
					"primary_key=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql.functions import col, lit, when\n",
					"import json\n",
					"\n",
					"spark: SparkSession = SparkSession.builder.getOrCreate()\n",
					"table_name_full = f\"{db_name}.{table_name}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Utility functions\n",
					"\n",
					"`get_delta_table_path`: Gets the location/path of a delta table\n",
					"\n",
					"`get_delta_table_lastest_version`: Gets the int value of the lastes version of a delta table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_delta_table_path(table_name):\n",
					"    table_path = spark.sql(f\"DESCRIBE DETAIL {table_name}\").select(\"location\").first()[\"location\"]\n",
					"    return table_path\n",
					"    \n",
					"def get_delta_table_lastest_version(table_path):\n",
					"    delta_table = DeltaTable.forPath(spark, table_path)\n",
					"    history_df = delta_table.history()\n",
					"    version = history_df.select(\"version\").orderBy(\"version\", ascending=False).first()[\"version\"]\n",
					"    return version"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_path: str = get_delta_table_path(table_name_full)\n",
					"latest_version: int = get_delta_table_lastest_version(table_path)\n",
					"\n",
					"logInfo(f\"Latest version of {table_name_full}: {latest_version}\")\n",
					"\n",
					"# If this is the first version (version 0), there are no changes to compare\n",
					"if latest_version == 0:\n",
					"    logInfo(f\"Table {table_name_full} only has one version (0). Returning all records as 'Create' events.\")\n",
					"    # For first version, all records are new\n",
					"    current_df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(table_path)\n",
					"    changes_df = current_df.withColumn(\"EventType\", lit(\"Create\"))\n",
					"    logInfo(f\"Found {current_df.count()} new records in {table_name_full}\")\n",
					"else:\n",
					"    # Continue with normal change detection for versions > 0\n",
					"    pass"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Only process change detection for tables with multiple versions\n",
					"if latest_version > 0:\n",
					"    try:\n",
					"        previous_version = latest_version - 1\n",
					"        \n",
					"        logInfo(f\"Reading changes between version {latest_version} and {previous_version} in delta table: {table_name_full}\")\n",
					"        \n",
					"        # Load the current and previous versions\n",
					"        current_version_df = spark.read.format(\"delta\").option(\"versionAsOf\", latest_version).load(table_path)\n",
					"        previous_version_df = spark.read.format(\"delta\").option(\"versionAsOf\", previous_version).load(table_path)\n",
					"        \n",
					"        # Log row counts for debugging\n",
					"        current_count = current_version_df.count()\n",
					"        previous_count = previous_version_df.count()\n",
					"        logInfo(f\"Current version ({latest_version}) has {current_count} rows, previous version ({previous_version}) has {previous_count} rows\")\n",
					"        \n",
					"        # Use primary key-based approach to detect changes\n",
					"        current_keys = current_version_df.select(primary_key).distinct()\n",
					"        previous_keys = previous_version_df.select(primary_key).distinct()\n",
					"        \n",
					"        # Find new records (primary key exists in current but not in previous)\n",
					"        new_keys = current_keys.subtract(previous_keys)\n",
					"        create_df = current_version_df.join(new_keys, on=primary_key, how=\"inner\") \\\n",
					"                                     .withColumn(\"EventType\", lit(\"Create\"))\n",
					"        \n",
					"        # Find deleted records (primary key exists in previous but not in current)\n",
					"        deleted_keys = previous_keys.subtract(current_keys)\n",
					"        delete_df = previous_version_df.join(deleted_keys, on=primary_key, how=\"inner\") \\\n",
					"                                      .withColumn(\"EventType\", lit(\"Delete\"))\n",
					"        \n",
					"        # Find records that exist in both versions (potential updates)\n",
					"        existing_keys = current_keys.intersect(previous_keys)\n",
					"        \n",
					"        # Get current and previous versions of existing records\n",
					"        current_existing = current_version_df.join(existing_keys, on=primary_key, how=\"inner\")\n",
					"        previous_existing = previous_version_df.join(existing_keys, on=primary_key, how=\"inner\")\n",
					"        \n",
					"        # Find records that actually changed by comparing all columns except metadata columns\n",
					"        exclude_cols = ['dateReceived', 'timestamp', 'ingestion_date', 'created_date', 'modified_date', 'last_updated']\n",
					"        compare_cols = [c for c in current_version_df.columns if c not in exclude_cols]\n",
					"        \n",
					"        current_for_compare = current_existing.select(*compare_cols)\n",
					"        previous_for_compare = previous_existing.select(*compare_cols)\n",
					"        \n",
					"        # Find records that changed (exist in current but not in previous when compared)\n",
					"        changed_records = current_for_compare.subtract(previous_for_compare)\n",
					"        changed_keys = changed_records.select(primary_key).distinct()\n",
					"        \n",
					"        # Get the full current record for changed keys\n",
					"        update_df = current_version_df.join(changed_keys, on=primary_key, how=\"inner\") \\\n",
					"                                     .withColumn(\"EventType\", lit(\"Update\"))\n",
					"        \n",
					"        # Union all changes\n",
					"        changes_df = create_df.union(update_df).union(delete_df)\n",
					"        \n",
					"        # Log change summary\n",
					"        creates_count = create_df.count()\n",
					"        updates_count = update_df.count()\n",
					"        deletes_count = delete_df.count()\n",
					"        total_changes = creates_count + updates_count + deletes_count\n",
					"        \n",
					"        logInfo(f\"Change summary: {creates_count} creates, {updates_count} updates, {deletes_count} deletes. Total: {total_changes}\")\n",
					"        \n",
					"    except Exception as e:\n",
					"        logError(f\"Failed to read changes in delta table: {table_name_full}. Exception: {e}\")\n",
					"        mssparkutils.notebook.exit('')\n",
					"else:\n",
					"    # For version 0 tables, changes_df is already set above\n",
					"    logInfo(f\"Using first-version logic for {table_name_full}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(changes_df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"formatted_data = [\n",
					"    {\n",
					"        'Body': str({k: v for k, v in row.asDict().items() if k != 'EventType'}),\n",
					"        'UserProperties': {'type': row['EventType']}\n",
					"    }\n",
					"    for row in changes_df.toLocalIterator()\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(formatted_data)"
				],
				"execution_count": null
			}
		]
	}
}