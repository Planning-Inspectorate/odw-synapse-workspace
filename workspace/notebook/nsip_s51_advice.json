{
	"name": "nsip_s51_advice",
	"properties": {
		"description": "This is the S51 advice curated table for ODT consumption",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ee0b6f30-3865-4265-94cb-17b1913ee8f6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest service bus data into a single external table, odw_curated_db.s51_advice.\n",
					"\n",
					"**Description**  \n",
					"The functionality of this notebook is to ingest data into odw_curated_db.s51_advice external table reading from odw_harmonised_db.nsip_s51_advice delta table.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"s51-advice\"\n",
					"table_name: str = \"odw_curated_db.s51_advice\"\n",
					"\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\n",
					"    df = spark.sql(\"\"\"\n",
					"        SELECT DISTINCT\n",
					"        AD.adviceId,\n",
					"        AD.adviceReference ,\n",
					"        CASE\n",
					"            WHEN AD.caseId = 'None'\n",
					"            THEN CAST(\"-1\" as INT)\n",
					"            ELSE AD.caseId\n",
					"        END  AS caseId,\n",
					"        AD.caseReference,\n",
					"        AD.title,\n",
					"        AD.titleWelsh,\n",
					"        AD.from,\n",
					"        CASE\n",
					"            WHEN LOWER(AD.agent) = 'none'\n",
					"            THEN NULL\n",
					"            ELSE AD.agent\n",
					"        END                                                     AS agent,\n",
					"        CASE \n",
					"            WHEN LOWER(AD.method) = 'none'\n",
					"            THEN NULL\n",
					"            ELSE LOWER(AD.method)\n",
					"            END                                                 AS method,\n",
					"        AD.enquiryDate,\n",
					"        AD.enquiryDetails,\n",
					"        AD.enquiryDetailsWelsh,\n",
					"        AD.adviceGivenBy,\n",
					"        AD.adviceDate,\n",
					"        AD.adviceDetails,\n",
					"        AD.adviceDetailsWelsh,\n",
					"        CASE\n",
					"            WHEN AD.status IN ('Not Checked','unchecked','Depublished')\n",
					"            THEN \"unchecked\"\n",
					"            WHEN AD.status = 'Do Not Publish'\n",
					"            THEN 'donotpublish'\n",
					"            ELSE LOWER(AD.status)\n",
					"        END                                                     AS status,\n",
					"        AD.redactionStatus,\n",
					"        AD.attachmentIds\n",
					"    FROM odw_harmonised_db.nsip_s51_advice \t        AS AD\n",
					"    WHERE AD.IsActive = 'Y'\n",
					"        \"\"\"\n",
					"    )\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in SQL query for table odw_harmonised_db.sb_appeal_event_estimate : {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    insert_count = df.count()\n",
					"    print(insert_count)\n",
					"    df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\n",
					"    print(f\"Written to {table_name}\")\n",
					"    \n",
					"    end_exec_time = datetime.now()\n",
					"   \n",
					"except Exception as e:\n",
					"    error_message = f\"Error appending data to the curated layer table : {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#####  Logging Execution Metadata to Azure Application Insights"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    # Calculate execution duration\n",
					"    duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"\n",
					"    # Define activity type\n",
					"    activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"\n",
					"    # Determine status and message\n",
					"    stage = \"Success\" if not error_message else \"Failed\"\n",
					"    status_message = (\n",
					"        f\"Successfully loaded data into {table_name} table\"\n",
					"        if not error_message\n",
					"        else f\"Failed to load data from {table_name} table\"\n",
					"    )\n",
					"    status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					"\n",
					"    # Prepare telemetry parameters\n",
					"    params = {\n",
					"        \"Stage\": stage,\n",
					"        \"PipelineName\": PipelineName,\n",
					"        \"PipelineRunID\": PipelineRunID,\n",
					"        \"StartTime\": start_exec_time.isoformat(),\n",
					"        \"EndTime\": end_exec_time.isoformat(),\n",
					"        \"Inserts\": insert_count,\n",
					"        \"Updates\": update_count,\n",
					"        \"Deletes\": delete_count,\n",
					"        \"ErrorMessage\": error_message,\n",
					"        \"StatusMessage\": status_message,\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\n",
					"        \"PipelineExecutionTimeInSec\": duration_seconds,\n",
					"        \"ActivityType\": activity_type,\n",
					"        \"DurationSeconds\": duration_seconds,\n",
					"        \"StatusCode\": status_code,\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\n",
					"    }\n",
					"\n",
					"    # Send telemetry asynchronously\n",
					"    send_telemetry_to_app_insights(params)\n",
					"\n",
					"    # Raise error if execution failed\n",
					"    if error_message:\n",
					"        print(f\"Notebook Failed for load {table_name} : {error_message}\")\n",
					"        raise RuntimeError(f\"Notebook Failed due to error in {table_name} Table: {error_message}\")\n",
					"\n",
					"except RuntimeError as e:\n",
					"    print(str(e))\n",
					"    import sys\n",
					"    sys.exit(1)"
				],
				"execution_count": null
			}
		]
	}
}