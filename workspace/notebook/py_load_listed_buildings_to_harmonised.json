{
	"name": "py_load_listed_buildings_to_harmonised",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5a16036e-1ebc-4f8c-8020-eded04daf9c5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from odw.core.util.logging_util import LoggingUtil"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialize Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define variables\n",
					"source_table = \"odw_standardised_db.listed_building\"\n",
					"target_table = \"odw_harmonised_db.listed_building\"\n",
					"primary_key = 'entity'\n",
					"\n",
					"# Initialize logging utility\n",
					"logging_util = LoggingUtil()\n",
					"\n",
					"# Initialize tracking variables\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Application Insights logger\n",
					"app_insight_logger = ProcessingLogger()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Read and transform data from source\n",
					"    logging_util.log_info(f\"Reading data from {source_table}\")\n",
					"    \n",
					"    # Check if target table exists to determine if this is initial load or incremental\n",
					"    target_exists = spark._jsparkSession.catalog().tableExists('odw_harmonised_db', 'listed_building')\n",
					"    \n",
					"    if target_exists:\n",
					"        logging_util.log_info(\"Target table exists - performing incremental processing\")\n",
					"        # Get max ID for incremental ID assignment\n",
					"        max_id_result = spark.sql(f\"SELECT COALESCE(MAX(ListedBuildingID), 0) as max_id FROM {target_table}\").collect()\n",
					"        max_existing_id = max_id_result[0]['max_id']\n",
					"    else:\n",
					"        logging_util.log_info(\"Target table does not exist - performing initial load\")\n",
					"        max_existing_id = 0\n",
					"    \n",
					"    # Read source data and add row numbers for ID generation\n",
					"    source_df = spark.sql(f\"\"\"\n",
					"        SELECT \n",
					"            ROW_NUMBER() OVER (ORDER BY entity) + {max_existing_id} AS ListedBuildingID,\n",
					"            dataset,\n",
					"            `end-date` AS endDate,\n",
					"            entity,\n",
					"            `entry-date` AS entryDate,\n",
					"            geometry,\n",
					"            `listed-building-grade` AS listedBuildingGrade,\n",
					"            name,\n",
					"            `organisation-entity` AS organisationEntity,\n",
					"            point,\n",
					"            prefix,\n",
					"            reference,\n",
					"            `start-date` AS startDate,\n",
					"            typology,\n",
					"            `documentation-url` AS documentationUrl,\n",
					"            '0' as Migrated,\n",
					"            'StandardisedDB' as ODTSourceSystem,\n",
					"            NULL AS SourceSystemID,\n",
					"            current_date() AS IngestionDate,\n",
					"            CAST(null as string) as ValidTo,\n",
					"            'Y' as IsActive\n",
					"        FROM {source_table}\n",
					"    \"\"\")\n",
					"    \n",
					"    # Add RowID calculation\n",
					"    from pyspark.sql.functions import md5, concat, coalesce, lit\n",
					"    \n",
					"    final_df = source_df.withColumn(\n",
					"        \"RowID\",\n",
					"        md5(concat(\n",
					"            coalesce(col(\"ListedBuildingID\").cast(\"string\"), lit('.')),\n",
					"            coalesce(col(\"entity\"), lit('.')),\n",
					"            coalesce(col(\"dataset\"), lit('.')),\n",
					"            coalesce(col(\"endDate\"), lit('.')),\n",
					"            coalesce(col(\"entryDate\"), lit('.')),\n",
					"            coalesce(col(\"geometry\"), lit('.')),\n",
					"            coalesce(col(\"listedBuildingGrade\"), lit('.')),\n",
					"            coalesce(col(\"name\"), lit('.')),\n",
					"            coalesce(col(\"organisationEntity\"), lit('.')),\n",
					"            coalesce(col(\"point\"), lit('.')),\n",
					"            coalesce(col(\"prefix\"), lit('.')),\n",
					"            coalesce(col(\"reference\"), lit('.')),\n",
					"            coalesce(col(\"startDate\"), lit('.')),\n",
					"            coalesce(col(\"typology\"), lit('.')),\n",
					"            coalesce(col(\"documentationUrl\"), lit('.')),\n",
					"            coalesce(col(\"Migrated\"), lit('.')),\n",
					"            coalesce(col(\"ODTSourceSystem\"), lit('.')),\n",
					"            coalesce(col(\"IngestionDate\").cast(\"string\"), lit('.')),\n",
					"            coalesce(col(\"ValidTo\"), lit('.'))\n",
					"        ))\n",
					"    )\n",
					"    \n",
					"    # Get record count\n",
					"    insert_count = final_df.count()\n",
					"    logging_util.log_info(f\"Processing {insert_count} records for {target_table}\")\n",
					"    \n",
					"    # Write data to target table\n",
					"    if target_exists:\n",
					"        # Append mode for existing table\n",
					"        logging_util.log_info(\"Appending data to existing target table\")\n",
					"        final_df.write.format(\"delta\").mode(\"append\").option(\"mergeSchema\", \"true\").saveAsTable(target_table)\n",
					"    else:\n",
					"        # Overwrite mode for new table\n",
					"        logging_util.log_info(\"Creating new target table with overwrite mode\")\n",
					"        final_df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(target_table)\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    logging_util.log_info(f\"Successfully processed {target_table} with {insert_count} records\")\n",
					"    \n",
					"    # Add successful result to logger\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"success\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time\n",
					"    )\n",
					"    \n",
					"except Exception as e:\n",
					"    # Handle errors with proper logging\n",
					"    logging_util.log_error(f\"Error processing {target_table}: {e}\")\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"failed\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time,\n",
					"        error_message=error_message\n",
					"    )\n",
					"    \n",
					"    # Exit with the JSON result\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Generate and exit with final logging results\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}