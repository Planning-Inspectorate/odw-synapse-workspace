{
	"name": "nsip_data",
	"properties": {
		"description": "please refer to the NSIP Entity Message Topic Requirements  documentation",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c7e46641-056b-438c-a6d9-834b4476618c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest service bus data  into single external table, odw_curated_db.nsip_project.\r\n",
					"\r\n",
					"**Description**  \r\n",
					"The functionality of this notebook is to ingest data into odw_curated_db.nsip_project external table reading from odw_harmonised_db.nsip_project delta table.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\r\n",
					"entity_name: str = \"nsip-project\"\r\n",
					"table_name: str = \"odw_curated_db.nsip_project\"\r\n",
					"\r\n",
					"start_exec_time = datetime.now()\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# This cell is generated from runtime parameters. Learn more: https://go.microsoft.com/fwlink/?linkid=2161015\r\n",
					"PipelineName = \"pln_horizon_to_odw_1872\"\r\n",
					"PipelineRunID = \"ae4d7397-72e7-4147-9152-e8711c6d6dab\"\r\n",
					"PipelineTriggerID = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerName = \"e41e5d48-981a-4c76-8f0e-7079be79686f\"\r\n",
					"PipelineTriggerType = \"PipelineActivity\"\r\n",
					"PipelineTriggeredbyPipelineName = \"pln_all_horizon_data\"\r\n",
					"PipelineTriggeredbyPipelineRunID = \"7cd26982-eaab-4646-b3fd-afd12b4bee73\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create DataFrame of required data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\r\n",
					"\tdf = spark.sql(\"\"\"\r\n",
					"\t\tSELECT\r\n",
					"\t\t\tCAST(Project.caseId AS INT) as caseId\r\n",
					"\t\t\t,Project.caseReference\r\n",
					"\t\t\t,Project.projectName\r\n",
					"\t\t\t,Project.projectNameWelsh\r\n",
					"\t\t\t,Project.projectDescription\r\n",
					"\t\t\t,Project.projectDescriptionWelsh\r\n",
					"\t\t\t,Project.decision\r\n",
					"\t\t\t,LOWER(project.publishStatus) AS publishStatus\r\n",
					"\t\t\t,Project.sector\r\n",
					"\t\t\t,CASE\r\n",
					"\t\t\t\tWHEN Project.ProjectType = 'WW01 - Waste Water treatment Plants' THEN\r\n",
					"\t\t\t\t\t'WW01 - Waste Water Treatment Plants'\r\n",
					"\t\t\t\tELSE \r\n",
					"\t\t\t\t\tProject.ProjectType\r\n",
					"\t\t\tEND AS projectType\r\n",
					"\t\t\t,LOWER(\tCASE \r\n",
					"\t\t\t\t\t\tWHEN Project.ODTSourceSystem = 'ODT' THEN \r\n",
					"\t\t\t\t\t\t\t'back-office-applications' \r\n",
					"\t\t\t\t\t\tELSE \r\n",
					"\t\t\t\t\t\t\tProject.ODTSourceSystem \r\n",
					"\t\t\t\t\tEND) AS sourceSystem\r\n",
					"\t\t\t,LOWER(REPLACE(REPLACE(Project.Stage,'-', '_'),' ', '_')) AS stage\r\n",
					"\t\t\t,Project.projectLocation\r\n",
					"\t\t\t,Project.projectLocationWelsh\r\n",
					"\t\t\t,Project.projectEmailAddress\r\n",
					"\t\t\t,Project.regions\r\n",
					"\t\t\t,Project.transboundary\r\n",
					"\t\t\t,CAST(project.Easting AS INT) AS easting\r\n",
					"\t\t\t,CAST(project.Northing AS INT) AS northing\r\n",
					"\t\t\t,Project.WelshLanguage AS welshLanguage\r\n",
					"\t\t\t,Project.mapZoomLevel\r\n",
					"\t\t\t,Project.SecretaryOfState AS secretaryOfState\r\n",
					"\t\t\t-- Pre-application dates\r\n",
					"\t\t\t,Project.datePINSFirstNotifiedOfProject\r\n",
					"\t\t\t,Project.dateProjectAppearsOnWebsite\t\r\n",
					"\t\t\t,Project.anticipatedSubmissionDateNonSpecific\r\n",
					"\t\t\t,Project.anticipatedDateOfSubmission\r\n",
					"\t\t\t,Project.screeningOpinionSought\t\r\n",
					"\t\t\t,Project.screeningOpinionIssued\r\n",
					"\t\t\t,Project.scopingOpinionSought\r\n",
					"\t\t\t,Project.scopingOpinionIssued\r\n",
					"\t\t\t,Project.section46Notification\r\n",
					"\t\t\t-- acceptance dates\r\n",
					"\t\t\t,Project.dateOfDCOSubmission\r\n",
					"\t\t\t,Project.deadlineForAcceptanceDecision\r\n",
					"\t\t\t,Project.dateOfDCOAcceptance\r\n",
					"\t\t\t,Project.dateOfNonAcceptance\r\n",
					"\t\t\t--pre examination dates\r\n",
					"\t\t\t,Project.dateOfRepresentationPeriodOpen\r\n",
					"\t\t\t,Project.dateOfRelevantRepresentationClose\r\n",
					"\t\t\t,Project.extensionToDateRelevantRepresentationsClose\r\n",
					"\t\t\t,Project.dateRRepAppearOnWebsite\r\n",
					"\t\t\t,Project.dateIAPIDue\r\n",
					"\t\t\t,Project.rule6LetterPublishDate\r\n",
					"\t\t\t,Project.preliminaryMeetingStartDate\r\n",
					"\t\t\t,Project.notificationDateForPMAndEventsDirectlyFollowingPM\r\n",
					"\t\t\t,Project.notificationDateForEventsDeveloper\r\n",
					"\t\t\t-- examination dates\r\n",
					"\t\t\t,Project.dateSection58NoticeReceived\r\n",
					"\t\t\t,Project.confirmedStartOfExamination\r\n",
					"\t\t\t,CAST (Project.rule8LetterPublishDate AS DATE) AS rule8LetterPublishDate\r\n",
					"\t\t\t,Project.deadlineForCloseOfExamination\r\n",
					"\t\t\t,Project.dateTimeExaminationEnds\r\n",
					"\t\t\t,Project.stage4ExtensionToExamCloseDate\r\n",
					"\t\t\t--recommendation dates\r\n",
					"\t\t\t,Project.deadlineForSubmissionOfRecommendation\r\n",
					"\t\t\t,Project.dateOfRecommendations\r\n",
					"\t\t\t,Project.stage5ExtensionToRecommendationDeadline\r\n",
					"\t\t\t--decision dates\r\n",
					"\t\t\t,Project.deadlineForDecision\r\n",
					"\t\t\t,Project.confirmedDateOfDecision\r\n",
					"\t\t\t,Project.stage5ExtensionToDecisionDeadline\r\n",
					"\t\t\t--post decision dates\r\n",
					"\t\t\t,Project.jRPeriodEndDate\r\n",
					"\t\t\t--withdrawl dates\r\n",
					"\t\t\t,Project.dateProjectWithdrawn\r\n",
					"\t\t\t-- Additional fields\r\n",
					"\t\t\t,Project.operationsLeadId\r\n",
					"\t\t\t,Project.operationsManagerId\r\n",
					"\t\t\t,Project.caseManagerId\r\n",
					"\t\t\t,Project.nsipOfficerIds\r\n",
					"\t\t\t,Project.nsipAdministrationOfficerIds\r\n",
					"\t\t\t,Project.leadInspectorId\r\n",
					"\t\t\t,Project.inspectorIds\r\n",
					"\t\t\t,Project.environmentalServicesOfficerId\r\n",
					"\t\t\t,Project.legalOfficerId\r\n",
					"\t\t\t,Project.applicantId\r\n",
					"\t\t\t,Project.migrationStatus\r\n",
					"\t\t\t,Project.dateOfReOpenRelevantRepresentationStart\r\n",
					"\t\t\t,Project.dateOfReOpenRelevantRepresentationClose\r\n",
					"\t\t\t,Project.isMaterialChange\r\n",
					"\t\tFROM \r\n",
					"\t\t\todw_harmonised_db.nsip_project AS Project\r\n",
					"\t\tWHERE \r\n",
					"\t\t\tProject.IsActive='Y'\r\n",
					"\t\t\"\"\"\r\n",
					"\t)\r\n",
					"except Exception as e:\r\n",
					"    error_message = f\"Error in SQL query for table odw_harmonised_db.sb_appeal_event_estimate : {str(e)[:800]}\"\r\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    insert_count = df.count()\r\n",
					"\r\n",
					"    df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\r\n",
					"    print(f\"Written to {table_name}\")\r\n",
					"    \r\n",
					"    end_exec_time = datetime.now()\r\n",
					"    app_insight_logger.add_table_result(                    \r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"success\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = \"\"\r\n",
					"    )\r\n",
					"    \r\n",
					"except Exception as e:\r\n",
					"    error_message = f\"Error appending data to the curated layer table : {str(e)[:800]}\"\r\n",
					"    end_exec_time = datetime.now() "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\r\n",
					"    # Calculate execution duration\r\n",
					"    duration_seconds = (end_exec_time - start_exec_time).total_seconds()\r\n",
					"\r\n",
					"    # Define activity type\r\n",
					"    activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\r\n",
					"\r\n",
					"    # Determine status and message\r\n",
					"    stage = \"Success\" if not error_message else \"Failed\"\r\n",
					"    status_message = (\r\n",
					"        f\"Successfully loaded data into {table_name} table\"\r\n",
					"        if not error_message\r\n",
					"        else f\"Failed to load data from {table_name} table\"\r\n",
					"    )\r\n",
					"    status_code = \"200\" if stage == \"Success\" else \"500\"\r\n",
					"\r\n",
					"    # Prepare telemetry parameters\r\n",
					"    params = {\r\n",
					"        \"Stage\": stage,\r\n",
					"        \"PipelineName\": PipelineName,\r\n",
					"        \"PipelineRunID\": PipelineRunID,\r\n",
					"        \"StartTime\": start_exec_time.isoformat(),\r\n",
					"        \"EndTime\": end_exec_time.isoformat(),\r\n",
					"        \"Inserts\": insert_count,\r\n",
					"        \"Updates\": update_count,\r\n",
					"        \"Deletes\": delete_count,\r\n",
					"        \"ErrorMessage\": error_message,\r\n",
					"        \"StatusMessage\": status_message,\r\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\r\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\r\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\r\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\r\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\r\n",
					"        \"PipelineExecutionTimeInSec\": duration_seconds,\r\n",
					"        \"ActivityType\": activity_type,\r\n",
					"        \"DurationSeconds\": duration_seconds,\r\n",
					"        \"StatusCode\": status_code,\r\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\r\n",
					"    }\r\n",
					"\r\n",
					"    # Send telemetry asynchronously\r\n",
					"    send_telemetry_to_app_insights(params)\r\n",
					"\r\n",
					"    # Raise error if execution failed\r\n",
					"    if error_message:\r\n",
					"        print(f\"Notebook Failed for load {table_name} : {error_message}\")\r\n",
					"        raise RuntimeError(f\"Notebook Failed due to error in {table_name} Table: {error_message}\")\r\n",
					"\r\n",
					"except RuntimeError as e:\r\n",
					"    print(str(e))\r\n",
					"    import sys\r\n",
					"    sys.exit(1)"
				],
				"execution_count": null
			}
		]
	}
}