{
	"name": "py_logging_decorator",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7a4eb4a7-91aa-4a76-9165-9aabef34f8ce"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import logging\n",
					"from azure.monitor.opentelemetry import configure_azure_monitor\n",
					"import functools\n",
					"import uuid\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# https://learn.microsoft.com/en-us/azure/azure-monitor/app/opentelemetry-enable?tabs=python#enable-azure-monitor-opentelemetry-for-net-nodejs-python-and-java-applications\n",
					"\n",
					"LOGGING_INITIALISED = globals().get(\"LOGGING_INITIALISED\", False)\n",
					"\n",
					"logger_name_space = \"odw_logs\"\n",
					"logger = logging.getLogger(logger_name_space)\n",
					"\n",
					"pipelinejobid = (\n",
					"    mssparkutils.runtime.context['pipelinejobid']\n",
					"    if mssparkutils.runtime.context.get('isForPipeline', False)\n",
					"    else uuid.uuid4()\n",
					")\n",
					"\n",
					"def logInfo(msg: str):\n",
					"    logger.info(f\"{pipelinejobid} : {msg}\")\n",
					"\n",
					"\n",
					"def logError(msg: str):\n",
					"    logger.error(f\"{pipelinejobid} : {msg}\")\n",
					"\n",
					"\n",
					"def logException(ex: Exception):\n",
					"    logger.exception(f\"{pipelinejobid} : {ex}\")\n",
					"\n",
					"\n",
					"def setupLogging(force=False):\n",
					"    try:\n",
					"        app_insights_connection_string = mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\n",
					"    except Exception as e:\n",
					"        print(\"Failed to get connection string:\", e)\n",
					"        return\n",
					"    configure_azure_monitor(logger_name=self.logger_name_space, connection_string=app_insights_connection_string)\n",
					"\n",
					"    logger.setLevel(logging.INFO)\n",
					"    logInfo(\"Logging initialized.\")\n",
					"\n",
					"\n",
					"def logging_to_appins(func):\n",
					"    @functools.wraps(func)\n",
					"    def wrapper(*args, **kwargs):\n",
					"        args_repr = [repr(a) for a in args]\n",
					"        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n",
					"        logInfo(f\"Function {func.__name__} called with args: {', '.join(args_repr + kwargs_repr)}\")\n",
					"        try:\n",
					"            return func(*args, **kwargs)\n",
					"        except mssparkutils.handlers.notebookHandler.NotebookExit as e:\n",
					"            logInfo(f\"Notebook exited: {e}\")\n",
					"            mssparkutils.notebook.exit(e)\n",
					"        except Exception as e:\n",
					"            logException(e)\n",
					"            raise\n",
					"    return wrapper\n",
					"\n",
					"if not LOGGING_INITIALISED:\n",
					"    setupLogging()"
				],
				"execution_count": null
			}
		]
	}
}