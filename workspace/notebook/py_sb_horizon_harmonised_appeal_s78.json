{
	"name": "py_sb_horizon_harmonised_appeal_s78",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "03a70682-4c1b-4b4b-a55c-ddbb81b1b1a7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### This notebook is for the creation `final_harmonised_table` that should combine service_bus table with horizon tables.\r\n",
					"##### As of now 5/12/2024 this notebook only includes service bus table as for this the first phase of processing `appeal_s78`. As soon as we are processing horizon tables this notebook should change accordingly to include the horizon data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\r\n",
					"from pyspark.sql import Row\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from datetime import date,datetime"
				],
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Logging decorator"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### will include horizon data in here \r\n",
					"\r\n",
					"service_bus_table = \"odw_harmonised_db.sb_appeal_s78\"\r\n",
					"\r\n",
					"spark_table_final = \"odw_harmonised_db.appeal_s78\"\r\n",
					"\r\n",
					"primary_key = 'caseReference'\r\n",
					"incremental_key = 'AppealS78ID'\r\n",
					"\r\n",
					"start_exec_time = datetime.now()\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0\r\n",
					"error_message=''"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if not error_message:\r\n",
					"    try:\r\n",
					"        # Get data out of the service bus with additional fields needed for Horizon data\r\n",
					"        service_bus_data = spark.sql(f\"\"\"\r\n",
					"                            SELECT DISTINCT\r\n",
					"                                CAST(NULL AS Long) as AppealS78ID\r\n",
					"                                ,caseReference as {primary_key}\r\n",
					"                                ,caseId\r\n",
					"                                ,submissionId\r\n",
					"                                ,caseStatus\r\n",
					"                                ,caseType\r\n",
					"                                ,caseProcedure\r\n",
					"                                ,lpaCode\r\n",
					"                                ,caseOfficerId\r\n",
					"                                ,inspectorId\r\n",
					"                                ,allocationLevel\r\n",
					"                                ,allocationBand\r\n",
					"                                ,caseSpecialisms\r\n",
					"                                ,caseSubmittedDate\r\n",
					"                                ,caseCreatedDate\r\n",
					"                                ,caseUpdatedDate\r\n",
					"                                ,caseValidDate\r\n",
					"                                ,caseValidationDate\r\n",
					"                                ,caseValidationOutcome\r\n",
					"                                ,caseValidationInvalidDetails\r\n",
					"                                ,caseValidationIncompleteDetails\r\n",
					"                                ,caseExtensionDate\r\n",
					"                                ,caseStartedDate\r\n",
					"                                ,casePublishedDate\r\n",
					"                                ,linkedCaseStatus\r\n",
					"                                ,leadCaseReference\r\n",
					"                                ,lpaQuestionnaireDueDate\r\n",
					"                                ,lpaQuestionnaireSubmittedDate\r\n",
					"                                ,lpaQuestionnaireCreatedDate\r\n",
					"                                ,lpaQuestionnairePublishedDate\r\n",
					"                                ,lpaQuestionnaireValidationOutcome\r\n",
					"                                ,lpaQuestionnaireValidationOutcomeDate\r\n",
					"                                ,lpaQuestionnaireValidationDetails\r\n",
					"                                ,lpaStatement\r\n",
					"                                ,caseWithdrawnDate\r\n",
					"                                ,caseTransferredDate\r\n",
					"                                ,transferredCaseClosedDate\r\n",
					"                                ,caseDecisionOutcomeDate\r\n",
					"                                ,caseDecisionPublishedDate\r\n",
					"                                ,caseDecisionOutcome\r\n",
					"                                ,caseCompletedDate\r\n",
					"                                ,enforcementNotice\r\n",
					"                                ,applicationReference\r\n",
					"                                ,applicationDate\r\n",
					"                                ,applicationDecision\r\n",
					"                                ,applicationDecisionDate\r\n",
					"                                ,caseSubmissionDueDate\r\n",
					"                                ,siteAddressLine1\r\n",
					"                                ,siteAddressLine2\r\n",
					"                                ,siteAddressTown\r\n",
					"                                ,siteAddressCounty\r\n",
					"                                ,siteAddressPostcode\r\n",
					"                                ,siteAccessDetails\r\n",
					"                                ,siteSafetyDetails\r\n",
					"                                ,siteAreaSquareMetres\r\n",
					"                                ,floorSpaceSquareMetres\r\n",
					"                                ,isCorrectAppealType\r\n",
					"                                ,isGreenBelt\r\n",
					"                                ,inConservationArea\r\n",
					"                                ,ownsAllLand\r\n",
					"                                ,ownsSomeLand\r\n",
					"                                ,knowsOtherOwners\r\n",
					"                                ,knowsAllOwners\r\n",
					"                                ,advertisedAppeal\r\n",
					"                                ,notificationMethod\r\n",
					"                                ,ownersInformed\r\n",
					"                                ,originalDevelopmentDescription\r\n",
					"                                ,changedDevelopmentDescription\r\n",
					"                                ,newConditionDetails\r\n",
					"                                ,nearbyCaseReferences\r\n",
					"                                ,neighbouringSiteAddresses\r\n",
					"                                ,affectedListedBuildingNumbers\r\n",
					"                                ,changedListedBuildingNumbers\r\n",
					"                                ,appellantCostsAppliedFor\r\n",
					"                                ,lpaCostsAppliedFor\r\n",
					"                                ,agriculturalHolding\r\n",
					"                                ,tenantAgriculturalHolding\r\n",
					"                                ,otherTenantsAgriculturalHolding\r\n",
					"                                ,informedTenantsAgriculturalHolding\r\n",
					"                                ,appellantProcedurePreference\r\n",
					"                                ,appellantProcedurePreferenceDetails\r\n",
					"                                ,appellantProcedurePreferenceDuration\r\n",
					"                                ,appellantProcedurePreferenceWitnessCount\r\n",
					"                                ,statusPlanningObligation\r\n",
					"                                ,affectsScheduledMonument\r\n",
					"                                ,hasProtectedSpecies\r\n",
					"                                ,isAonbNationalLandscape\r\n",
					"                                ,designatedSitesNames\r\n",
					"                                ,isGypsyOrTravellerSite\r\n",
					"                                ,isPublicRightOfWay\r\n",
					"                                ,eiaEnvironmentalImpactSchedule\r\n",
					"                                ,eiaDevelopmentDescription\r\n",
					"                                ,eiaSensitiveAreaDetails\r\n",
					"                                ,eiaColumnTwoThreshold\r\n",
					"                                ,eiaScreeningOpinion\r\n",
					"                                ,eiaRequiresEnvironmentalStatement\r\n",
					"                                ,eiaCompletedEnvironmentalStatement\r\n",
					"                                ,consultedBodiesDetails\r\n",
					"                                ,hasStatutoryConsultees\r\n",
					"                                ,hasInfrastructureLevy\r\n",
					"                                ,isInfrastructureLevyFormallyAdopted\r\n",
					"                                ,infrastructureLevyAdoptedDate\r\n",
					"                                ,infrastructureLevyExpectedDate\r\n",
					"                                ,lpaProcedurePreference\r\n",
					"                                ,lpaProcedurePreferenceDetails\r\n",
					"                                ,lpaProcedurePreferenceDuration\r\n",
					"                                ,caseworkReason\r\n",
					"                                ,developmentType\r\n",
					"                                ,importantInformation\r\n",
					"                                ,jurisdiction\r\n",
					"                                ,redeterminedIndicator\r\n",
					"                                ,dateCostsReportDespatched\r\n",
					"                                ,dateNotRecoveredOrDerecovered\r\n",
					"                                ,dateRecovered\r\n",
					"                                ,originalCaseDecisionDate\r\n",
					"                                ,targetDate\r\n",
					"                                ,appellantCommentsSubmittedDate\r\n",
					"                                ,appellantStatementSubmittedDate\r\n",
					"                                ,appellantProofsSubmittedDate\r\n",
					"                                ,finalCommentsDueDate\r\n",
					"                                ,interestedPartyRepsDueDate\r\n",
					"                                ,lpaCommentsSubmittedDate\r\n",
					"                                ,lpaProofsSubmittedDate\r\n",
					"                                ,lpaStatementSubmittedDate\r\n",
					"                                ,proofsOfEvidenceDueDate\r\n",
					"                                ,siteNoticesSentDate\r\n",
					"                                ,statementDueDate\r\n",
					"                                ,reasonForNeighbourVisits\r\n",
					"                                ,numberOfResidencesNetChange\r\n",
					"                                ,siteGridReferenceEasting\r\n",
					"                                ,siteGridReferenceNorthing\r\n",
					"                                ,siteViewableFromRoad\r\n",
					"                                ,siteWithinSSSI\r\n",
					"                                ,typeOfPlanningApplication\r\n",
					"                                ,preserveGrantLoan\r\n",
					"                                ,consultHistoricEngland\r\n",
					"                                ,Migrated\r\n",
					"                                ,ODTSourceSystem\r\n",
					"                                ,IngestionDate\r\n",
					"                                ,NULLIF(ValidTo, '') AS ValidTo\r\n",
					"                                ,'' as RowID\r\n",
					"                                ,IsActive\r\n",
					"                            FROM \r\n",
					"                                {service_bus_table}\r\n",
					"                            \"\"\")\r\n",
					"\r\n",
					"    except Exception as e:\r\n",
					"        error_message = f\"Error in source Service Bus SQL query {service_bus_table}: {str(e)[:800]}\"\r\n",
					"        end_exec_time = datetime.now()"
				],
				"execution_count": 87
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### In this section below we should process the horizon data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F, types as T\r\n",
					"\r\n",
					"hzn_src = spark.table(\"odw_standardised_db.horizon_appeal_s78\")\r\n",
					"seen = {}\r\n",
					"exprs = []\r\n",
					"for n in hzn_src.columns:\r\n",
					"    lc = n.lower()\r\n",
					"    if lc in seen:\r\n",
					"        continue\r\n",
					"    seen[lc] = n\r\n",
					"    exprs.append(F.col(n).alias(n))\r\n",
					"hzn_src = hzn_src.select(*exprs)\r\n",
					"\r\n",
					"def _col_or_none(name):\r\n",
					"    return F.col(name).cast(\"string\") if name in hzn_src.columns else F.lit(None)\r\n",
					"\r\n",
					"if \"caseReference\" in hzn_src.columns:\r\n",
					"    hzn_src = hzn_src.withColumn(\r\n",
					"        \"caseReference\",\r\n",
					"        F.coalesce(\r\n",
					"            F.col(\"caseReference\").cast(\"string\"),\r\n",
					"            _col_or_none(\"casereference\"),\r\n",
					"            _col_or_none(\"caseuniqueid\"),\r\n",
					"            _col_or_none(\"caseid\")\r\n",
					"        )\r\n",
					"    )\r\n",
					"else:\r\n",
					"    hzn_src = hzn_src.withColumn(\r\n",
					"        \"caseReference\",\r\n",
					"        F.coalesce(\r\n",
					"            _col_or_none(\"casereference\"),\r\n",
					"            _col_or_none(\"caseuniqueid\"),\r\n",
					"            _col_or_none(\"caseid\")\r\n",
					"        )\r\n",
					"    )\r\n",
					"\r\n",
					"\r\n",
					"if \"caseReference\" not in hzn_src.columns:\r\n",
					"    if \"caseuniqueid\" in hzn_src.columns:\r\n",
					"        hzn_src = hzn_src.withColumnRenamed(\"caseuniqueid\", \"caseReference\")\r\n",
					"    elif \"casereference\" in hzn_src.columns:\r\n",
					"        hzn_src = hzn_src.withColumnRenamed(\"casereference\", \"caseReference\")\r\n",
					"\r\n",
					"if \"IngestionDate\" not in hzn_src.columns:\r\n",
					"    ing_col = (\r\n",
					"        F.col(\"ingested_datetime\")\r\n",
					"        if \"ingested_datetime\" in hzn_src.columns else\r\n",
					"        F.col(\"expected_from\")\r\n",
					"        if \"expected_from\" in hzn_src.columns else\r\n",
					"        F.current_timestamp()\r\n",
					"    )\r\n",
					"    hzn_src = hzn_src.withColumn(\"IngestionDate\", ing_col)\r\n",
					"\r\n",
					"hzn_aligned = (\r\n",
					"    hzn_src\r\n",
					"      .withColumn(\"AppealS78ID\", F.lit(None).cast(\"long\"))\r\n",
					"      .withColumn(\"Migrated\", F.lit(\"0\"))\r\n",
					"      .withColumn(\"ODTSourceSystem\", F.lit(\"HORIZON\"))\r\n",
					"      .withColumn(\"ValidTo\", F.lit(None).cast(\"string\"))\r\n",
					"      .withColumn(\"RowID\", F.lit(\"\"))\r\n",
					"      .withColumn(\"IsActive\", F.lit(\"N\"))\r\n",
					")\r\n",
					"\r\n",
					"sb_schema = service_bus_data.schema\r\n",
					"for f in sb_schema:\r\n",
					"    if f.name not in hzn_aligned.columns:\r\n",
					"        hzn_aligned = hzn_aligned.withColumn(f.name, F.lit(None).cast(f.dataType))\r\n",
					"    else:\r\n",
					"        if str(hzn_aligned.schema[f.name].dataType) != str(f.dataType):\r\n",
					"            hzn_aligned = hzn_aligned.withColumn(f.name, F.col(f.name).cast(f.dataType))\r\n",
					"\r\n",
					"seen = {}\r\n",
					"for c in list(hzn_aligned.columns):\r\n",
					"    lc = c.lower()\r\n",
					"    if lc in seen:\r\n",
					"        hzn_aligned = hzn_aligned.drop(c)\r\n",
					"    else:\r\n",
					"        seen[lc] = c\r\n",
					"\r\n",
					"proj = []\r\n",
					"lower_map = {c.lower(): c for c in hzn_aligned.columns}\r\n",
					"for f in sb_schema:\r\n",
					"    if f.name in hzn_aligned.columns:\r\n",
					"        proj.append(F.col(f.name).alias(f.name))\r\n",
					"    elif f.name.lower() in lower_map:\r\n",
					"        proj.append(F.col(lower_map[f.name.lower()]).cast(f.dataType).alias(f.name))\r\n",
					"    else:\r\n",
					"        proj.append(F.lit(None).cast(f.dataType).alias(f.name))\r\n",
					"hzn_aligned = hzn_aligned.select(*proj)\r\n",
					"\r\n",
					"stg_df = service_bus_data.unionByName(hzn_aligned, allowMissingColumns=True).distinct()\r\n",
					"\r\n",
					"null_key_cnt = stg_df.filter(F.col(\"caseReference\").isNull()).count()\r\n",
					"print(f\"Stage rows with NULL caseReference: {null_key_cnt}\")\r\n",
					"stg_df = stg_df.filter(F.col(\"caseReference\").isNotNull())\r\n",
					""
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"print(\"Stage total rows (pre-write):\", stg_df.count())\r\n",
					"display(stg_df.groupBy(\"ODTSourceSystem\").count())\r\n",
					"display(stg_df.filter(F.col(\"caseReference\").isNull())\r\n",
					"              .groupBy(\"ODTSourceSystem\").count())\r\n",
					""
				],
				"execution_count": 96
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### End of horizon section"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### In here we should handle merging service bus with horizon, and handle any array columns found."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Prepare data for intermediate appeal_s78 processing"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Ingest final data set to delta table appeal_s78"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"stg_tbl = \"odw_harmonised_db.appeal_s78_stg\"\r\n",
					"\r\n",
					"(stg_df\r\n",
					" .write\r\n",
					" .format(\"delta\")\r\n",
					" .mode(\"overwrite\")\r\n",
					" .option(\"overwriteSchema\", \"true\")\r\n",
					" .saveAsTable(stg_tbl))\r\n",
					"\r\n",
					"print(f\"Stage written: {stg_tbl}, rows = {stg_df.count():,}\")\r\n",
					""
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F, Window as W\r\n",
					"\r\n",
					"FINAL = spark_table_final\r\n",
					"stg = (\r\n",
					"    spark.table(\"odw_harmonised_db.appeal_s78_stg\")\r\n",
					"         .filter(F.col(\"caseReference\").isNotNull())\r\n",
					"         .withColumn(\"IngestionDate\", F.col(\"IngestionDate\").cast(\"timestamp\"))\r\n",
					")\r\n",
					"\r\n",
					"exclude = {\r\n",
					"    \"AppealS78ID\", \"RowID\", \"ValidTo\", \"IsActive\",\r\n",
					"    \"IngestionDate\", \"ODTSourceSystem\", \"Migrated\"\r\n",
					"}\r\n",
					"hash_cols = [c for c in stg.columns if c not in exclude]\r\n",
					"\r\n",
					"state_hash = F.sha2(\r\n",
					"    F.concat_ws(\"||\", *[F.coalesce(F.col(c).cast(\"string\"), F.lit(\"\")) for c in hash_cols]),\r\n",
					"    256\r\n",
					")\r\n",
					"\r\n",
					"src_priority = F.when(F.col(\"ODTSourceSystem\") == \"ODT\", F.lit(2)) \\\r\n",
					"                .when(F.col(\"ODTSourceSystem\") == \"HORIZON\", F.lit(1)) \\\r\n",
					"                .otherwise(F.lit(0))\r\n",
					"\r\n",
					"tie = F.row_number().over(\r\n",
					"        W.partitionBy(\"caseReference\",\"IngestionDate\",\"ODTSourceSystem\")\r\n",
					"         .orderBy(F.coalesce(F.col(\"RowID\"), F.lit(\"\")).asc())\r\n",
					"     )\r\n",
					"\r\n",
					"ordered = stg.withColumn(\"state_hash\", state_hash) \\\r\n",
					"             .withColumn(\"src_priority\", src_priority) \\\r\n",
					"             .withColumn(\"tie\", tie)\r\n",
					"\r\n",
					"w_ing = (W.partitionBy(\"caseReference\")\r\n",
					"           .orderBy(F.col(\"IngestionDate\").asc(),\r\n",
					"                    F.col(\"src_priority\").desc(),\r\n",
					"                    F.col(\"tie\").asc()))\r\n",
					"\r\n",
					"scd_base = (ordered\r\n",
					"    .withColumn(\"prev_hash\", F.lag(\"state_hash\").over(w_ing))\r\n",
					"    .withColumn(\"chg\", F.when(F.col(\"prev_hash\").isNull() | (F.col(\"prev_hash\") != F.col(\"state_hash\")), 1).otherwise(0))\r\n",
					")\r\n",
					"\r\n",
					"changes = scd_base.filter(F.col(\"chg\") == 1)\r\n",
					"\r\n",
					"w_change = W.partitionBy(\"caseReference\") \\\r\n",
					"            .orderBy(F.col(\"IngestionDate\").asc(), F.col(\"src_priority\").desc(), F.col(\"tie\").asc())\r\n",
					"\r\n",
					"scd2 = (changes\r\n",
					"    .withColumn(\"ValidFrom\", F.col(\"IngestionDate\"))\r\n",
					"    .withColumn(\"next_IngestionDate\", F.lead(\"IngestionDate\").over(w_change))\r\n",
					"    .withColumn(\r\n",
					"        \"ValidTo\",\r\n",
					"        F.when(F.col(\"next_IngestionDate\").isNull(), F.lit(None).cast(\"timestamp\"))\r\n",
					"         .when(F.col(\"next_IngestionDate\") == F.col(\"IngestionDate\"),\r\n",
					"               F.col(\"next_IngestionDate\") + F.expr(\"INTERVAL 1 MICROSECOND\"))\r\n",
					"         .otherwise(F.col(\"next_IngestionDate\"))\r\n",
					"    )\r\n",
					"    .withColumn(\"IsActive\", F.when(F.col(\"next_IngestionDate\").isNull(), F.lit(\"Y\")).otherwise(F.lit(\"N\")))\r\n",
					"    .drop(\"state_hash\",\"prev_hash\",\"chg\",\"next_IngestionDate\",\"src_priority\",\"tie\",\"ValidFrom\")\r\n",
					")\r\n",
					"\r\n",
					"scd2 = scd2.withColumn(\r\n",
					"    \"AppealS78ID\",\r\n",
					"    F.row_number().over(W.partitionBy(\"caseReference\").orderBy(F.col(\"IngestionDate\").asc())).cast(\"long\")\r\n",
					")\r\n",
					"\r\n",
					"(scd2\r\n",
					" .write\r\n",
					" .format(\"delta\")\r\n",
					" .mode(\"overwrite\")\r\n",
					" .option(\"overwriteSchema\", \"true\")\r\n",
					" .partitionBy(\"IsActive\")\r\n",
					" .saveAsTable(FINAL))\r\n",
					"\r\n",
					"print(f\"Final written: {FINAL}, rows = {scd2.count():,}\")\r\n",
					""
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT ODTSourceSystem, COUNT(*) AS rows\r\n",
					"FROM odw_harmonised_db.appeal_s78\r\n",
					"GROUP BY ODTSourceSystem\r\n",
					"ORDER BY rows DESC;\r\n",
					"\r\n",
					"SELECT COUNT(*) AS violators\r\n",
					"FROM (\r\n",
					"  SELECT caseReference\r\n",
					"  FROM odw_harmonised_db.appeal_s78\r\n",
					"  WHERE IsActive='Y'\r\n",
					"  GROUP BY caseReference\r\n",
					"  HAVING COUNT(*) <> 1\r\n",
					") v;\r\n",
					"\r\n",
					"SELECT COUNT(DISTINCT caseReference) AS distinct_keys,\r\n",
					"       SUM(CASE WHEN caseReference IS NULL THEN 1 ELSE 0 END) AS null_keys\r\n",
					"FROM odw_harmonised_db.appeal_s78;\r\n",
					"\r\n",
					"SELECT COUNT(*) AS bad_periods\r\n",
					"FROM (\r\n",
					"  SELECT caseReference, IngestionDate, ValidTo\r\n",
					"  FROM odw_harmonised_db.appeal_s78\r\n",
					"  WHERE ValidTo IS NOT NULL AND IngestionDate >= ValidTo\r\n",
					") t;\r\n",
					"\r\n",
					"SELECT\r\n",
					"  SUM(CASE WHEN IsActive='Y' AND ValidTo IS NULL THEN 1 ELSE 0 END) AS ok_active,\r\n",
					"  SUM(CASE WHEN IsActive='Y' AND ValidTo IS NOT NULL THEN 1 ELSE 0 END) AS bad_active_with_validto,\r\n",
					"  SUM(CASE WHEN IsActive='N' AND ValidTo IS NULL THEN 1 ELSE 0 END) AS bad_inactive_without_validto\r\n",
					"FROM odw_harmonised_db.appeal_s78;\r\n",
					""
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT ODTSourceSystem, COUNT(*) FROM odw_harmonised_db.appeal_s78 GROUP BY ODTSourceSystem;\r\n",
					"\r\n",
					"SELECT caseReference, COUNT(*) c\r\n",
					"FROM odw_harmonised_db.appeal_s78\r\n",
					"WHERE IsActive='Y'\r\n",
					"GROUP BY caseReference HAVING c>1;\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM (\r\n",
					"  SELECT caseReference, IngestionDate, ValidTo,\r\n",
					"         CASE WHEN ValidTo IS NOT NULL AND IngestionDate > ValidTo THEN 1 ELSE 0 END AS bad\r\n",
					"  FROM odw_harmonised_db.appeal_s78\r\n",
					") t WHERE bad=1;\r\n",
					"\r\n",
					"SELECT Migrated, COUNT(*) FROM odw_harmonised_db.appeal_s78 GROUP BY Migrated;\r\n",
					""
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT ODTSourceSystem, COUNT(*) FROM odw_harmonised_db.appeal_s78 GROUP BY ODTSourceSystem;\r\n",
					"SELECT COUNT(*) FROM odw_harmonised_db.appeal_s78 WHERE caseReference IS NULL;\r\n",
					"SELECT caseReference, COUNT(*) c\r\n",
					"FROM odw_harmonised_db.appeal_s78\r\n",
					"WHERE IsActive='Y'\r\n",
					"GROUP BY caseReference HAVING c>1;\r\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"source": [
					"duration_seconds = (end_exec_time - start_exec_time).total_seconds()\r\n",
					"activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\r\n",
					"stage = \"Success\" if not error_message else \"Failed\"\r\n",
					"status_message = (\r\n",
					"    f\"Successfully loaded data into {spark_table_final} table\"\r\n",
					"    if not error_message\r\n",
					"    else f\"Failed to load data from {spark_table_final} table\"\r\n",
					")\r\n",
					"status_code = \"200\" if stage == \"Success\" else \"500\"\r\n",
					" \r\n",
					"log_telemetry_and_exit(\r\n",
					"    stage,\r\n",
					"    start_exec_time,\r\n",
					"    end_exec_time,\r\n",
					"    error_message,\r\n",
					"    spark_table_final,\r\n",
					"    insert_count,\r\n",
					"    update_count,\r\n",
					"    delete_count,\r\n",
					"    PipelineName,\r\n",
					"    PipelineRunID,\r\n",
					"    PipelineTriggerID,\r\n",
					"    PipelineTriggerName,\r\n",
					"    PipelineTriggerType,\r\n",
					"    PipelineTriggeredbyPipelineName,\r\n",
					"    PipelineTriggeredbyPipelineRunID,\r\n",
					"    activity_type,\r\n",
					"    duration_seconds,\r\n",
					"    status_message,\r\n",
					"    status_code\r\n",
					")"
				],
				"execution_count": 16
			}
		]
	}
}