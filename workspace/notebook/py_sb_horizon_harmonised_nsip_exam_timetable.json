{
	"name": "py_sb_horizon_harmonised_nsip_exam_timetable",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "12831db5-ceb8-4046-a1d1-4e08cd94597f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_nsip_exam_timetable Delta table and other source tables to owb_harmonised_db.nsip_exam_timetable Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Description**  \n",
					"The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_nsip_exam_timetable Delta table and other source tables to owb_harmonised_db.nsip_exam_timetable Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import required libraries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Logging decorator"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_applicationinsights"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table: str = \"odw_harmonised_db.sb_nsip_exam_timetable\" \n",
					"horizon_table: str = \"odw_standardised_db.horizon_examination_timetable\"\n",
					"nsip_project_harmonised_table: str = \"odw_harmonised_db.nsip_project\" \n",
					"spark_table_final: str = \"odw_harmonised_db.nsip_exam_timetable\"\n",
					"\n",
					"start_exec_time = datetime.now()\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0\n",
					"error_message=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of the service bus with additional fields needed for Horizon data\n",
					"    service_bus_data = spark.sql(f\"\"\"\n",
					"                            SELECT DISTINCT\n",
					"                                NSIPExaminationTimetableID\n",
					"                                ,caseReference\n",
					"                                ,published\n",
					"                                ,events\n",
					"                                ,Migrated\n",
					"                                ,ODTSourceSystem\n",
					"                                ,SourceSystemID\n",
					"                                ,IngestionDate \n",
					"                                ,NULLIF(ValidTo, '') AS ValidTo\n",
					"                                ,'' as RowID\n",
					"                                ,IsActive\n",
					"                            FROM \n",
					"                                {service_bus_table} AS SBT\n",
					"                        \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in source Service Bus SQL query {service_bus_table}: {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"    horizon_data = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT\n",
					"                            CAST(NULL AS Long) as NSIPExaminationTimetableID\n",
					"                            ,Horizon.CaseReference\n",
					"                            ,CASE\n",
					"                                WHEN hnd.ExamTimetablePublishStatus = 'Published' THEN true\n",
					"                                WHEN hnd.ExamTimetablePublishStatus = 'Not Published' THEN false\n",
					"                                WHEN hnd.ExamTimetablePublishStatus = 'Ready to Publish' THEN false\n",
					"                                ELSE null\n",
					"                            END as published\n",
					"                            ,CAST(Horizon.ID AS Integer) As eventId\n",
					"                            ,Horizon.typeofexamination As type\n",
					"                            ,Horizon.Name As eventTitle\n",
					"                            ,Horizon.NameWelsh As eventTitleWelsh\n",
					"                            ,Horizon.Description As description\n",
					"                            ,Horizon.DescriptionWelsh As descriptionWelsh\n",
					"                            ,Horizon.DeadlineStartDateTime As eventDeadlineStartDate\n",
					"                            ,Horizon.Date As date\n",
					"                            ,\"0\" as Migrated\n",
					"                            ,\"Horizon\" as ODTSourceSystem\n",
					"                            ,NULL AS SourceSystemID\n",
					"                            ,to_timestamp(Horizon.expected_from)  AS IngestionDate\n",
					"                            ,CAST(NULL AS String) as ValidTo -- to avoid any null descrepancies\n",
					"                            ,'' as RowID\n",
					"                            ,'Y' as IsActive\n",
					"                        FROM\n",
					"                            {horizon_table} AS Horizon\n",
					"                        LEFT JOIN\n",
					"                            odw_standardised_db.horizon_nsip_data as hnd\n",
					"                        ON\n",
					"                            Horizon.CaseReference = hnd.CaseReference\n",
					"                        WHERE Horizon.ingested_datetime = (SELECT MAX(Horizon.ingested_datetime) FROM {horizon_table} as Horizon)\n",
					"                        AND hnd.ingested_datetime = (SELECT MAX(hnd.ingested_datetime) FROM odw_standardised_db.horizon_nsip_data as hnd)\n",
					"                    \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in source Horizon SQL query {horizon_table}: {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Establish aggregated view of events\n",
					"event_columns = [\"eventId\", \"type\", \"eventTitle\", \"eventTitleWelsh\", \"description\", \"descriptionWelsh\", \"eventDeadlineStartDate\", \"date\"]\n",
					"\n",
					"horizon_events = horizon_data.groupBy(\"caseReference\").agg(collect_list(struct(event_columns)).alias(\"events\"))\n",
					"horizon_data = horizon_data.drop(*event_columns)\n",
					"horizon_data = horizon_data.join(horizon_events, on=\"caseReference\", how=\"inner\")\n",
					"\n",
					"# adding eventLineItems column for each event\n",
					"horizon_data = horizon_data.withColumn(\"events\",\n",
					"    transform(col(\"events\"),\n",
					"        lambda event: event.withField(\"eventLineItems\", expr(\"array()\"))\n",
					"    )\n",
					")\n",
					"\n",
					"#sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns).drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Prepare data for intermediate nsip_exam_timetable processing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"\n",
					"    results = service_bus_data.unionByName(horizon_data,allowMissingColumns=True)\n",
					"    results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in ingesting delta table {spark_table_final}: {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_nsip_exam_timetable_calculations_base\n",
					"AS\n",
					"SELECT  \n",
					"    row_number() OVER(PARTITION BY caseReference ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"    ,row_number() OVER(ORDER BY IngestionDate asc, caseReference asc) AS NSIPExaminationTimetableID\n",
					"    ,caseReference\n",
					"    ,IngestionDate\n",
					"    ,ValidTo\n",
					"    ,'0' AS Migrated\n",
					"    ,CASE row_number() OVER(PARTITION BY caseReference ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"    END AS IsActive                \n",
					"FROM\n",
					"    odw_harmonised_db.nsip_exam_timetable"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPExaminationTimetableID\n",
					"                            ,CurrentRow.caseReference \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.caseReference IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_nsip_exam_timetable_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_nsip_exam_timetable_calculations_base AS NextRow\n",
					"                                ON CurrentRow.caseReference = NextRow.caseReference\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT caseReference FROM  odw_harmonised_db.sb_nsip_exam_timetable) AS Raw\n",
					"                                ON CurrentRow.caseReference = Raw.caseReference \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")\n",
					"\n",
					"df_calcs = df_calcs.withColumnRenamed(\"caseReference\", \"temp_caseReference\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    results = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT \n",
					"                            NSIPExaminationTimetableID\n",
					"                            ,caseReference\n",
					"                            ,published\n",
					"                            ,events\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,IngestionDate\n",
					"                            ,ValidTo\n",
					"                            ,MD5(CONCAT(\n",
					"                                    IFNULL(CAST(NSIPExaminationTimetableID AS bigint), '.')\n",
					"                                    ,IFNULL(CAST(caseReference AS integer), '.')\n",
					"                                    ,IFNULL(CAST(published AS String), '.')\n",
					"                                    ,IFNULL(CAST(events AS String), '.')\n",
					"                                    ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                    ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                                )\n",
					"                            ) AS RowID\n",
					"                            ,IsActive\n",
					"        FROM \n",
					"            {spark_table_final}\"\"\")\n",
					"            \n",
					"except Exception as e:\n",
					"    error_message = f\"Error in preparing results dataframe for {spark_table_final}: {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"results = results.drop(\"NSIPExaminationTimetableID\", \"ValidTo\", \"Migrated\", \"IsActive\")\n",
					"final_df = results.join(df_calcs, (df_calcs[\"temp_caseReference\"] == results[\"caseReference\"]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Ingest final data set to delta table nsip_exam_timetable"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    insert_count = final_df.count()\n",
					"    final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    end_exec_time = datetime.now()\n",
					"\n",
					"except Exception as e:\n",
					"    error_message = f\"Error in ingesting delta table in the final step {spark_table_final}: {str(e)[:800]}\"\n",
					"    end_exec_time = datetime.now()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    # Calculate execution duration\n",
					"    duration_seconds = (end_exec_time - start_exec_time).total_seconds()\n",
					"\n",
					"    # Define activity type\n",
					"    activity_type = f\"{mssparkutils.runtime.context['currentNotebookName']} Notebook\"\n",
					"\n",
					"    # Determine status and message\n",
					"    stage = \"Success\" if not error_message else \"Failed\"\n",
					"    status_message = (\n",
					"        f\"Successfully loaded data into {spark_table_final} table\"\n",
					"        if not error_message\n",
					"        else f\"Failed to load data from {spark_table_final} table\"\n",
					"    )\n",
					"    status_code = \"200\" if stage == \"Success\" else \"500\"\n",
					"\n",
					"    # Prepare telemetry parameters\n",
					"    params = {\n",
					"        \"Stage\": stage,\n",
					"        \"PipelineName\": PipelineName,\n",
					"        \"PipelineRunID\": PipelineRunID,\n",
					"        \"StartTime\": start_exec_time.isoformat(),\n",
					"        \"EndTime\": end_exec_time.isoformat(),\n",
					"        \"Inserts\": insert_count,\n",
					"        \"Updates\": update_count,\n",
					"        \"Deletes\": delete_count,\n",
					"        \"ErrorMessage\": error_message,\n",
					"        \"StatusMessage\": status_message,\n",
					"        \"PipelineTriggerID\": PipelineTriggerID,\n",
					"        \"PipelineTriggerName\": PipelineTriggerName,\n",
					"        \"PipelineTriggerType\": PipelineTriggerType,\n",
					"        \"PipelineTriggeredbyPipelineName\": PipelineTriggeredbyPipelineName,\n",
					"        \"PipelineTriggeredbyPipelineRunID\": PipelineTriggeredbyPipelineRunID,\n",
					"        \"PipelineExecutionTimeInSec\": duration_seconds,\n",
					"        \"ActivityType\": activity_type,\n",
					"        \"DurationSeconds\": duration_seconds,\n",
					"        \"StatusCode\": status_code,\n",
					"        \"AppInsCustomEventName\": \"ODW_Master_Pipeline_Logs\"\n",
					"    }\n",
					"\n",
					"    # Send telemetry asynchronously\n",
					"    send_telemetry_to_app_insights(params)\n",
					"\n",
					"    # Raise error if execution failed\n",
					"    if error_message:\n",
					"        print(f\"Notebook Failed for load {spark_table_final} : {error_message}\")\n",
					"        raise RuntimeError(f\"Notebook Failed due to error in {spark_table_final} Table: {error_message}\")\n",
					"\n",
					"except RuntimeError as e:\n",
					"    print(str(e))\n",
					"    import sys\n",
					"    sys.exit(1)"
				],
				"execution_count": null
			}
		]
	}
}