{
	"name": "hist_sap_timesheets",
	"properties": {
		"folder": {
			"name": "odw-harmonised/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e7661dce-9e65-44fc-9fd0-60e2395c85dd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    # Set time parser policy\n",
					"    logInfo(\"Setting legacy time parser policy\")\n",
					"    spark.sql(\"SET spark.sql.legacy.timeParserPolicy = LEGACY\")\n",
					"    logInfo(\"Legacy time parser policy set successfully\")\n",
					"    \n",
					"    # Delete records from history where a replacement timesheet exists in staging table\n",
					"    logInfo(\"Starting deletion from Hist.sap_timesheets where replacement timesheets exist in staging\")\n",
					"    deleted_replacement_rows = spark.sql(\"\"\"\n",
					"        DELETE FROM Hist.sap_timesheets\n",
					"        WHERE timesheetactivity_uuid IN (\n",
					"            SELECT replacement_timesheet_uuid\n",
					"            FROM load.sap_timesheets_stage\n",
					"        )\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully deleted records where replacement timesheets exist in staging\")\n",
					"    \n",
					"    # Delete records from history where duplicate timesheet exists in staging table\n",
					"    logInfo(\"Starting deletion from Hist.sap_timesheets where duplicate timesheets exist in staging\")\n",
					"    deleted_duplicate_rows = spark.sql(\"\"\"\n",
					"        DELETE FROM Hist.sap_timesheets\n",
					"        WHERE timesheet_uuid IN (\n",
					"            SELECT timesheet_uuid\n",
					"            FROM load.sap_timesheets_stage\n",
					"        )\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully deleted records where duplicate timesheets exist in staging\")\n",
					"    \n",
					"    # Insert all records from staging table into history\n",
					"    logInfo(\"Starting data insertion into Hist.sap_timesheets from load.sap_timesheets_stage\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO Hist.sap_timesheets (\n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            activity_startdate,\n",
					"            activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            activity_created_date,\n",
					"            activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            timesheet_startdate,\n",
					"            timesheet_enddate,\n",
					"            timesheet_created_date,\n",
					"            timesheet_last_updated,\n",
					"            timesheet_submission_date,\n",
					"            timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            timesheetactivity_uuid,\n",
					"            replacement_timesheetactivity_uuid,\n",
					"            extract_date\n",
					"        )\n",
					"        SELECT \n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            activity_startdate,\n",
					"            activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            activity_created_date,\n",
					"            activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            timesheet_startdate,\n",
					"            timesheet_enddate,\n",
					"            timesheet_created_date,\n",
					"            timesheet_last_updated,\n",
					"            timesheet_submission_date,\n",
					"            timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            CONCAT(timesheet_uuid, activity_uuid) AS timesheetactivity_uuid,\n",
					"            CONCAT(replacement_timesheet_uuid, activity_uuid) AS replacement_timesheetactivity_uuid,\n",
					"            extract_date\n",
					"        FROM load.sap_timesheets_stage\n",
					"    \"\"\")\n",
					"    \n",
					"    # Check the number of rows inserted\n",
					"    inserted_rows = spark.sql(\"SELECT COUNT(*) as count FROM Hist.sap_timesheets WHERE extract_date = CURRENT_DATE()\").collect()[0]['count']\n",
					"    result[\"record_count\"] = inserted_rows\n",
					"    logInfo(f\"Successfully inserted {inserted_rows} rows into Hist.sap_timesheets\")\n",
					"    \n",
					"    # Verify data quality - check for any NULL timesheetactivity_uuid values\n",
					"    null_uuid_count = spark.sql(\"SELECT COUNT(*) as count FROM Hist.sap_timesheets WHERE timesheetactivity_uuid IS NULL AND extract_date = CURRENT_DATE()\").collect()[0]['count']\n",
					"    if null_uuid_count > 0:\n",
					"        logError(f\"Data quality issue: {null_uuid_count} rows have NULL timesheetactivity_uuid values\")\n",
					"        result[\"status\"] = \"warning\"\n",
					"    else:\n",
					"        logInfo(\"Data quality check passed: No NULL timesheetactivity_uuid values found\")\n",
					"    \n",
					"    # Final success message\n",
					"    logInfo(\"SAP timesheet data processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in SAP timesheet data processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Truncate error message if it exceeds 300 characters\n",
					"    truncated_error = (error_msg[:297] + '...') if len(error_msg) > 300 else error_msg\n",
					"    \n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = truncated_error\n",
					"    result[\"record_count\"] = -1  # Indicate failure with -1 count\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result))"
				],
				"execution_count": null
			}
		]
	}
}