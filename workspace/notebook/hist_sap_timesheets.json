{
	"name": "hist_sap_timesheets",
	"properties": {
		"folder": {
			"name": "odw-harmonised/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0fae5cc1-c9e9-4064-a9e6-d51b05d1c74c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from datetime import datetime, timedelta\n",
					"import json\n",
					"import re\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    # Set time parser policy\n",
					"    logInfo(\"Setting legacy time parser policy\")\n",
					"    spark.sql(\"SET spark.sql.legacy.timeParserPolicy = LEGACY\")\n",
					"    logInfo(\"Legacy time parser policy set successfully\")\n",
					"    \n",
					"    # Check initial counts BEFORE any processing\n",
					"    initial_staging_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_standardised_db.load_sap_timesheets\").collect()[0]['count']\n",
					"    logInfo(f\"Initial staging table record count: {initial_staging_count}\")\n",
					"    \n",
					"    initial_history_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_harmonised_db.hist_sap_timesheets\").collect()[0]['count']\n",
					"    logInfo(f\"Initial history table record count: {initial_history_count}\")\n",
					"    \n",
					"    replacement_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) as count \n",
					"        FROM odw_standardised_db.load_sap_timesheets \n",
					"        WHERE replacement_timesheet_uuid IS NOT NULL\n",
					"    \"\"\").collect()[0]['count']\n",
					"    logInfo(f\"Records in staging with replacement_timesheet_uuid: {replacement_count}\")\n",
					"    \n",
					"    # Create temporary view with records to exclude from history table (based on replacement_timesheet_uuid)\n",
					"    logInfo(\"Creating temporary view to identify replacement records for deletion from history\")\n",
					"    spark.sql(\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW history_replacement_records_to_exclude AS\n",
					"        SELECT DISTINCT s.replacement_timesheet_uuid as timesheet_uuid\n",
					"        FROM odw_standardised_db.load_sap_timesheets s\n",
					"        WHERE s.replacement_timesheet_uuid IS NOT NULL\n",
					"    \"\"\")\n",
					"    \n",
					"    # Create temporary view with records to exclude from history table (based on timesheet_uuid)\n",
					"    logInfo(\"Creating temporary view to identify duplicate records for deletion from history\")\n",
					"    spark.sql(\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW history_duplicate_records_to_exclude AS\n",
					"        SELECT DISTINCT s.timesheet_uuid\n",
					"        FROM odw_standardised_db.load_sap_timesheets s\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count records to be removed from history for logging\n",
					"    records_to_remove = spark.sql(\"\"\"\n",
					"        SELECT COUNT(DISTINCT h.timesheet_uuid) as count \n",
					"        FROM odw_harmonised_db.hist_sap_timesheets h\n",
					"        WHERE h.timesheet_uuid IN (SELECT timesheet_uuid FROM history_replacement_records_to_exclude)\n",
					"           OR h.timesheet_uuid IN (SELECT timesheet_uuid FROM history_duplicate_records_to_exclude)\n",
					"    \"\"\").collect()[0]['count']\n",
					"    logInfo(f\"Identified {records_to_remove} records to be removed from odw_harmonised_db.hist_sap_timesheets\")\n",
					"    \n",
					"    # Create temp view with records to keep in history\n",
					"    logInfo(\"Creating temporary view with history records to retain\")\n",
					"    spark.sql(\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW hist_records_to_keep AS\n",
					"        SELECT h.*\n",
					"        FROM odw_harmonised_db.hist_sap_timesheets h\n",
					"        WHERE h.timesheet_uuid NOT IN (SELECT timesheet_uuid FROM history_replacement_records_to_exclude)\n",
					"          AND h.timesheet_uuid NOT IN (SELECT timesheet_uuid FROM history_duplicate_records_to_exclude)\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count records being kept for logging\n",
					"    records_to_keep = spark.sql(\"SELECT COUNT(*) as count FROM hist_records_to_keep\").collect()[0]['count']\n",
					"    logInfo(f\"Retaining {records_to_keep} existing records in odw_harmonised_db.hist_sap_timesheets\")\n",
					"    \n",
					"    # Delete all records from history table (using DELETE FROM instead of TRUNCATE for Delta Lake compatibility)\n",
					"    logInfo(\"Deleting all records from odw_harmonised_db.hist_sap_timesheets table\")\n",
					"    spark.sql(\"DELETE FROM odw_harmonised_db.hist_sap_timesheets\")\n",
					"    \n",
					"    # Insert back the records to keep\n",
					"    logInfo(f\"Reinserting {records_to_keep} retained records into odw_harmonised_db.hist_sap_timesheets\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.hist_sap_timesheets (\n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            activity_startdate,\n",
					"            activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            activity_created_date,\n",
					"            activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            timesheet_startdate,\n",
					"            timesheet_enddate,\n",
					"            timesheet_created_date,\n",
					"            timesheet_last_updated,\n",
					"            timesheet_submission_date,\n",
					"            timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            timesheetactivity_uuid,\n",
					"            replacement_timesheetactivity_uuid,\n",
					"            extract_date,\n",
					"            SourceSystemID,\n",
					"            IngestionDate,\n",
					"            ValidTo,\n",
					"            RowID,\n",
					"            IsActive\n",
					"        )\n",
					"        SELECT \n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            activity_startdate,\n",
					"            activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            activity_created_date,\n",
					"            activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            timesheet_startdate,\n",
					"            timesheet_enddate,\n",
					"            timesheet_created_date,\n",
					"            timesheet_last_updated,\n",
					"            timesheet_submission_date,\n",
					"            timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            timesheetactivity_uuid,\n",
					"            replacement_timesheetactivity_uuid,\n",
					"            extract_date,\n",
					"            SourceSystemID,\n",
					"            IngestionDate,\n",
					"            ValidTo,\n",
					"            RowID,\n",
					"            IsActive\n",
					"        FROM hist_records_to_keep\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully reinserted retained records\")\n",
					"    \n",
					"    # CRITICAL: Filter staging data to exclude replaced records\n",
					"    # This prevents inserting old records that have been replaced (matching stored procedure logic)\n",
					"    # NOTE: We do NOT modify the staging table, only create a filtered view\n",
					"    logInfo(\"Creating filtered view of staging data (excluding replaced records)\")\n",
					"    \n",
					"    # Count how many records would be excluded\n",
					"    staging_records_to_exclude = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) as count \n",
					"        FROM odw_standardised_db.load_sap_timesheets s1\n",
					"        WHERE EXISTS (\n",
					"            SELECT 1 \n",
					"            FROM odw_standardised_db.load_sap_timesheets s2 \n",
					"            WHERE s2.replacement_timesheet_uuid = s1.timesheet_uuid\n",
					"        )\n",
					"    \"\"\").collect()[0]['count']\n",
					"    \n",
					"    logInfo(f\"Found {staging_records_to_exclude} replaced records to exclude from staging data\")\n",
					"    \n",
					"    # Create filtered view with only current (non-replaced) records\n",
					"    spark.sql(\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW load_sap_timesheets_filtered AS\n",
					"        SELECT s1.*\n",
					"        FROM odw_standardised_db.load_sap_timesheets s1\n",
					"        WHERE NOT EXISTS (\n",
					"            SELECT 1 \n",
					"            FROM odw_standardised_db.load_sap_timesheets s2 \n",
					"            WHERE s2.replacement_timesheet_uuid = s1.timesheet_uuid\n",
					"        )\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count filtered records\n",
					"    filtered_count = spark.sql(\"SELECT COUNT(*) as count FROM load_sap_timesheets_filtered\").collect()[0]['count']\n",
					"    logInfo(f\"Filtered staging view contains {filtered_count} current records (original: {initial_staging_count}, excluded: {staging_records_to_exclude})\")\n",
					"    \n",
					"    # Insert all current records from filtered staging view into history\n",
					"    logInfo(\"Starting data insertion into odw_harmonised_db.hist_sap_timesheets from filtered staging data\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.hist_sap_timesheets (\n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            activity_startdate,\n",
					"            activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            activity_created_date,\n",
					"            activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            timesheet_startdate,\n",
					"            timesheet_enddate,\n",
					"            timesheet_created_date,\n",
					"            timesheet_last_updated,\n",
					"            timesheet_submission_date,\n",
					"            timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            timesheetactivity_uuid,\n",
					"            replacement_timesheetactivity_uuid,\n",
					"            extract_date,\n",
					"            SourceSystemID,\n",
					"            IngestionDate,\n",
					"            ValidTo,\n",
					"            RowID,\n",
					"            IsActive\n",
					"        )\n",
					"        SELECT \n",
					"            person_number,\n",
					"            first_name,\n",
					"            last_name,\n",
					"            manager_id,\n",
					"            manager_first_name,\n",
					"            manager_last_name,\n",
					"            subarea,\n",
					"            org_unit,\n",
					"            pay_grade,\n",
					"            time_type,\n",
					"            activity_type,\n",
					"            casework_category,\n",
					"            case_reference,\n",
					"            CAST(TO_DATE(activity_startdate, 'dd/MM/yyyy') AS DATE) AS activity_startdate,\n",
					"            CAST(TO_DATE(activity_enddate, 'dd/MM/yyyy') AS DATE) AS activity_enddate,\n",
					"            duration_hours,\n",
					"            duration_minutes,\n",
					"            CAST(TO_DATE(activity_created_date, 'dd/MM/yyyy') AS DATE) AS activity_created_date,\n",
					"            CAST(TO_DATE(activity_last_updated, 'dd/MM/yyyy') AS DATE) AS activity_last_updated,\n",
					"            activity_uuid,\n",
					"            planned_working_time,\n",
					"            recorded_working_time,\n",
					"            working_time_diff,\n",
					"            external_times_exist,\n",
					"            CAST(TO_DATE(timesheet_startdate, 'dd/MM/yyyy') AS DATE) AS timesheet_startdate,\n",
					"            CAST(TO_DATE(timesheet_enddate, 'dd/MM/yyyy') AS DATE) AS timesheet_enddate,\n",
					"            CAST(TO_DATE(timesheet_created_date, 'dd/MM/yyyy') AS DATE) AS timesheet_created_date,\n",
					"            CAST(TO_DATE(timesheet_last_updated, 'dd/MM/yyyy') AS DATE) AS timesheet_last_updated,\n",
					"            CAST(TO_DATE(timesheet_submission_date, 'dd/MM/yyyy') AS DATE) AS timesheet_submission_date,\n",
					"            CAST(TO_DATE(timesheet_approved_date, 'dd/MM/yyyy') AS DATE) AS timesheet_approved_date,\n",
					"            approval_status,\n",
					"            timesheet_uuid,\n",
					"            replacement_timesheet_uuid,\n",
					"            CASE \n",
					"                WHEN timesheet_uuid IS NOT NULL AND activity_uuid IS NOT NULL \n",
					"                THEN CONCAT(timesheet_uuid, activity_uuid) \n",
					"                ELSE NULL \n",
					"            END AS timesheetactivity_uuid,\n",
					"            CASE \n",
					"                WHEN replacement_timesheet_uuid IS NOT NULL AND activity_uuid IS NOT NULL \n",
					"                THEN CONCAT(replacement_timesheet_uuid, activity_uuid) \n",
					"                ELSE NULL \n",
					"            END AS replacement_timesheetactivity_uuid,\n",
					"            CAST(TO_DATE(extract_date, 'dd/MM/yyyy') AS DATE) AS extract_date,\n",
					"            'sap_timesheets' AS SourceSystemID,\n",
					"            CURRENT_TIMESTAMP() AS IngestionDate,\n",
					"            CAST('9999-12-31 23:59:59' AS TIMESTAMP) AS ValidTo,\n",
					"            md5(concat_ws('|', \n",
					"                CAST(person_number AS STRING),\n",
					"                timesheet_uuid,\n",
					"                activity_uuid,\n",
					"                CAST(timesheet_startdate AS STRING),\n",
					"                CAST(extract_date AS STRING)\n",
					"            )) AS RowID,\n",
					"            'Y' AS IsActive\n",
					"        FROM load_sap_timesheets_filtered\n",
					"    \"\"\")\n",
					"    \n",
					"    # Check the number of rows inserted from filtered staging\n",
					"    staging_rows = filtered_count\n",
					"    \n",
					"    # Check total rows in history table after insertion\n",
					"    total_rows = spark.sql(\"SELECT COUNT(*) as count FROM odw_harmonised_db.hist_sap_timesheets\").collect()[0]['count']\n",
					"    \n",
					"    result[\"record_count\"] = staging_rows\n",
					"    logInfo(f\"Successfully inserted {staging_rows} rows from filtered staging. Total records in history table: {total_rows}\")\n",
					"    \n",
					"    # Verify data quality - check for any NULL timesheetactivity_uuid values in newly inserted records\n",
					"    null_uuid_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) as count \n",
					"        FROM odw_harmonised_db.hist_sap_timesheets \n",
					"        WHERE timesheetactivity_uuid IS NULL \n",
					"        AND extract_date = CURRENT_DATE()\n",
					"    \"\"\").collect()[0]['count']\n",
					"    \n",
					"    if null_uuid_count > 0:\n",
					"        logError(f\"Data quality issue: {null_uuid_count} rows have NULL timesheetactivity_uuid values\")\n",
					"        result[\"status\"] = \"warning\"\n",
					"    else:\n",
					"        logInfo(\"Data quality check passed: No NULL timesheetactivity_uuid values found\")\n",
					"    \n",
					"    # Final success message\n",
					"    logInfo(\"SAP timesheet data processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in SAP timesheet data processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Truncate error message if it exceeds 300 characters\n",
					"    truncated_error = (error_msg[:297] + '...') if len(error_msg) > 300 else error_msg\n",
					"    \n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = truncated_error\n",
					"    result[\"record_count\"] = -1  # Indicate failure with -1 count\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result))"
				],
				"execution_count": 20
			}
		]
	}
}